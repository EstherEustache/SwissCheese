Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
stopCluster(cl)
for(nr_i in 25:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
#---- Define cluster
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{
#---packages for simulations
devtools::load_all(".")
library(sampling)
library(StratifiedSampling)
})
for(nr_i in 25:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
for(nr_i in 29:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
for(nr_i in 38:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
stopCluster(cl)
#---- Define cluster
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{
#---packages for simulations
devtools::load_all(".")
library(sampling)
library(StratifiedSampling)
})
for(nr_i in 38:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
stopCluster(cl)
#---- Define cluster
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{
#---packages for simulations
devtools::load_all(".")
library(sampling)
library(StratifiedSampling)
})
for(nr_i in 44:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
stopCluster(cl)
rm(list=ls())
library(sampling)
# library(SwissCheese)
##----------------------------------------------------------------
##                        Initialization                         -
##----------------------------------------------------------------
N  <- 600
##---Gamma variables
g1 <- rgamma(N, shape = 7, rate = 0.2)
g2 <- rgamma(N, shape = 5, rate = 0.4)
g3 <- rgamma(N, shape = 9, rate = 0.1)
g4 <- rgamma(N, shape = 3, rate = 0.4)
##---Correlated variables from the gamma variables
V1 <- g1
V2 <- g1+g2
V3 <- g1-g3
V4 <- g1-g4
V5 <- (g1>35)*1
cor(cbind(V1,V2,V3,V4,V5))
##---Final data set
X <- cbind(V1,V2,V3,V4,V5)
J <- ncol(X)
#----pp: probabilités de réponse pour chaque variable
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.105* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
generateNA <- function(X, pp, nr_min)
{
#----Response indicator matrix: r
nr <- 1
r  <- matrix(rep(0,N*J), c(N,J))
while(nr < nr_min) {
for(j in 1:J){
r[,j] <- UPpoisson(pp[,j])
}
nr <- sum(rowSums(r) == J)			# Number of respondent
}
#----Add NA to matrix X
for(i in 1:ncol(X)){
X[r[,i] == 0,i] <- NA
}
return(X)
}
##----------------------------------------------------------------
##                    Function for simulations                   -
##----------------------------------------------------------------
funImput <- function(imput_i, df, X_NA){
# set.seed(imput_i)
X <- df
##--------------
##  Imputation
##--------------
#---Swiss cheese imputation
SW   <- swissCheeseImput(X = X_NA, d = NULL, k = 10, tol = 1e-2, max_iter = 50)
X_SW <- SW$X_new
#---Deterministic imputation
LI   <- deterministicImput(X_NA, d = NULL, k = SW$k, tol = 1e-2, max_iter = 50)
X_LI <- LI$X_new
#---Random hotdeck imputation
X_HD <- hotDeckImput(X_NA, k = NULL)
#---Random hotdeck imputation knn
X_HD_k <- hotDeckImput(X_NA, k = SW$k)
##-----------
##  Results
##-----------
#--- Compute for each variable and each imputation method: total, 10-th and 90-th percentile, median, variance.
tot       <- as.vector(colSums(X))
tot_SW    <- as.vector(colSums(X_SW))
tot_LI    <- as.vector(colSums(X_LI))
tot_HD    <- as.vector(colSums(X_HD))
tot_HD_k  <- as.vector(colSums(X_HD_k))
P10       <- as.vector(apply(X,    2, quantile, probs = 0.1))
P10_SW    <- apply(X_SW, 2, quantile, probs = 0.1)
P10_LI    <- apply(X_LI, 2, quantile, probs = 0.1)
P10_HD    <- apply(X_HD, 2, quantile, probs = 0.1)
P10_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.1)
P90       <- apply(X,    2, quantile, probs = 0.9)
P90_SW    <- apply(X_SW, 2, quantile, probs = 0.9)
P90_LI    <- apply(X_LI, 2, quantile, probs = 0.9)
P90_HD    <- apply(X_HD, 2, quantile, probs = 0.9)
P90_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.9)
P50       <- apply(X,    2, quantile, probs = 0.5)
P50_SW    <- apply(X_SW, 2, quantile, probs = 0.5)
P50_LI    <- apply(X_LI, 2, quantile, probs = 0.5)
P50_HD    <- apply(X_HD, 2, quantile, probs = 0.5)
P50_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.5)
var       <- as.vector(apply(X,    2, function(x) var(x)))
var_SW    <- as.vector(apply(X_SW, 2, function(x) var(x)))
var_LI    <- as.vector(apply(X_LI, 2, function(x) var(x)))
var_HD    <- as.vector(apply(X_HD, 2, function(x) var(x)))
var_HD_k  <- as.vector(apply(X_HD_k, 2, function(x) var(x)))
#--- Compute for each variable and each imputation method: the covariances.
cov       <-  c(cov(X)[-1,1],cov(X)[-c(1,2),2],cov(X)[-c(1,2,3),3],cov(X)[-c(1,2,3,4),4])
cov_SW    <-  c(cov(X_SW)[-1,1],cov(X_SW)[-c(1,2),2],cov(X_SW)[-c(1,2,3),3],cov(X_SW)[-c(1,2,3,4),4])
cov_LI    <-  c(cov(X_LI)[-1,1],cov(X_LI)[-c(1,2),2],cov(X_LI)[-c(1,2,3),3],cov(X_LI)[-c(1,2,3,4),4])
cov_HD    <-  c(cov(X_HD)[-1,1],cov(X_HD)[-c(1,2),2],cov(X_HD)[-c(1,2,3),3],cov(X_HD)[-c(1,2,3,4),4])
cov_HD_k  <-  c(cov(X_HD_k)[-1,1],cov(X_HD_k)[-c(1,2),2],cov(X_HD_k)[-c(1,2,3),3],cov(X_HD_k)[-c(1,2,3,4),4])
#---All results
Estimate_simu <- c(tot, tot_SW, tot_LI, tot_HD, tot_HD_k,
P10, P10_SW, P10_LI, P10_HD, P10_HD_k,
P50, P50_SW, P50_LI, P50_HD, P50_HD_k,
P90, P90_SW, P90_LI, P90_HD, P90_HD_k,
var, var_SW, var_LI, var_HD, var_HD_k)
Cov_simu      <- c(cov, cov_SW, cov_LI, cov_HD, cov_HD_k)
return(list(Estimate_simu = Estimate_simu, Cov_simu = Cov_simu, k = SW$k))
}
##----------------------------------------------------------------
##                    parallelized simulations                   -
##----------------------------------------------------------------
library(parallel)
#---- Define cluster
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{
#---packages for simulations
devtools::load_all(".")
library(sampling)
library(StratifiedSampling)
})
col         <- colnames(X)
colnames(X) <- NULL
#----Number of simulations
nb_nr    <- 100   #---Number of random nonresponse
nb_imput <- 100   #---Number of random imputation
nb_simu  <- nb_nr*nb_imput #---Total number of simulations
#----Number of neighbors
Neighbors_k   <- rep(0, nb_nr)
for(nr_i in 44:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
for(nr_i in 44:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
stopCluster(cl)
stopCluster(cl)
rm(list=ls())
library(sampling)
# library(SwissCheese)
##----------------------------------------------------------------
##                        Initialization                         -
##----------------------------------------------------------------
N  <- 600
##---Gamma variables
g1 <- rgamma(N, shape = 7, rate = 0.2)
g2 <- rgamma(N, shape = 5, rate = 0.4)
g3 <- rgamma(N, shape = 9, rate = 0.1)
g4 <- rgamma(N, shape = 3, rate = 0.4)
##---Correlated variables from the gamma variables
V1 <- g1
V2 <- g1+g2
V3 <- g1-g3
V4 <- g1-g4
V5 <- (g1>35)*1
cor(cbind(V1,V2,V3,V4,V5))
##---Final data set
X <- cbind(V1,V2,V3,V4,V5)
J <- ncol(X)
#----pp: probabilités de réponse pour chaque variable
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.105* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
generateNA <- function(X, pp, nr_min)
{
#----Response indicator matrix: r
nr <- 1
r  <- matrix(rep(0,N*J), c(N,J))
while(nr < nr_min) {
for(j in 1:J){
r[,j] <- UPpoisson(pp[,j])
}
nr <- sum(rowSums(r) == J)			# Number of respondent
}
#----Add NA to matrix X
for(i in 1:ncol(X)){
X[r[,i] == 0,i] <- NA
}
return(X)
}
funImput <- function(imput_i, df, X_NA){
# set.seed(imput_i)
X <- df
##--------------
##  Imputation
##--------------
#---Swiss cheese imputation
SW   <- swissCheeseImput(X = X_NA, d = NULL, k = 10, tol = 1e-2, max_iter = 50)
X_SW <- SW$X_new
#---Deterministic imputation
LI   <- deterministicImput(X_NA, d = NULL, k = SW$k, tol = 1e-2, max_iter = 50)
X_LI <- LI$X_new
#---Random hotdeck imputation
X_HD <- hotDeckImput(X_NA, k = NULL)
#---Random hotdeck imputation knn
X_HD_k <- hotDeckImput(X_NA, k = SW$k)
##-----------
##  Results
##-----------
#--- Compute for each variable and each imputation method: total, 10-th and 90-th percentile, median, variance.
tot       <- as.vector(colSums(X))
tot_SW    <- as.vector(colSums(X_SW))
tot_LI    <- as.vector(colSums(X_LI))
tot_HD    <- as.vector(colSums(X_HD))
tot_HD_k  <- as.vector(colSums(X_HD_k))
P10       <- as.vector(apply(X,    2, quantile, probs = 0.1))
P10_SW    <- apply(X_SW, 2, quantile, probs = 0.1)
P10_LI    <- apply(X_LI, 2, quantile, probs = 0.1)
P10_HD    <- apply(X_HD, 2, quantile, probs = 0.1)
P10_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.1)
P90       <- apply(X,    2, quantile, probs = 0.9)
P90_SW    <- apply(X_SW, 2, quantile, probs = 0.9)
P90_LI    <- apply(X_LI, 2, quantile, probs = 0.9)
P90_HD    <- apply(X_HD, 2, quantile, probs = 0.9)
P90_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.9)
P50       <- apply(X,    2, quantile, probs = 0.5)
P50_SW    <- apply(X_SW, 2, quantile, probs = 0.5)
P50_LI    <- apply(X_LI, 2, quantile, probs = 0.5)
P50_HD    <- apply(X_HD, 2, quantile, probs = 0.5)
P50_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.5)
var       <- as.vector(apply(X,    2, function(x) var(x)))
var_SW    <- as.vector(apply(X_SW, 2, function(x) var(x)))
var_LI    <- as.vector(apply(X_LI, 2, function(x) var(x)))
var_HD    <- as.vector(apply(X_HD, 2, function(x) var(x)))
var_HD_k  <- as.vector(apply(X_HD_k, 2, function(x) var(x)))
#--- Compute for each variable and each imputation method: the covariances.
cov       <-  c(cov(X)[-1,1],cov(X)[-c(1,2),2],cov(X)[-c(1,2,3),3],cov(X)[-c(1,2,3,4),4])
cov_SW    <-  c(cov(X_SW)[-1,1],cov(X_SW)[-c(1,2),2],cov(X_SW)[-c(1,2,3),3],cov(X_SW)[-c(1,2,3,4),4])
cov_LI    <-  c(cov(X_LI)[-1,1],cov(X_LI)[-c(1,2),2],cov(X_LI)[-c(1,2,3),3],cov(X_LI)[-c(1,2,3,4),4])
cov_HD    <-  c(cov(X_HD)[-1,1],cov(X_HD)[-c(1,2),2],cov(X_HD)[-c(1,2,3),3],cov(X_HD)[-c(1,2,3,4),4])
cov_HD_k  <-  c(cov(X_HD_k)[-1,1],cov(X_HD_k)[-c(1,2),2],cov(X_HD_k)[-c(1,2,3),3],cov(X_HD_k)[-c(1,2,3,4),4])
#---All results
Estimate_simu <- c(tot, tot_SW, tot_LI, tot_HD, tot_HD_k,
P10, P10_SW, P10_LI, P10_HD, P10_HD_k,
P50, P50_SW, P50_LI, P50_HD, P50_HD_k,
P90, P90_SW, P90_LI, P90_HD, P90_HD_k,
var, var_SW, var_LI, var_HD, var_HD_k)
Cov_simu      <- c(cov, cov_SW, cov_LI, cov_HD, cov_HD_k)
return(list(Estimate_simu = Estimate_simu, Cov_simu = Cov_simu, k = SW$k))
}
##----------------------------------------------------------------
##                    parallelized simulations                   -
##----------------------------------------------------------------
library(parallel)
#---- Define cluster
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{
#---packages for simulations
devtools::load_all(".")
library(sampling)
library(StratifiedSampling)
})
col         <- colnames(X)
colnames(X) <- NULL
#----Number of simulations
nb_nr    <- 100   #---Number of random nonresponse
nb_imput <- 100   #---Number of random imputation
nb_simu  <- nb_nr*nb_imput #---Total number of simulations
#----Number of neighbors
Neighbors_k   <- rep(0, nb_nr)
for(nr_i in 44:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
