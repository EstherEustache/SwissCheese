X[r[,i] == 0,i] <- NA
}
return(X)
}
#--Correlations of numeric variables
cor <- cor(X)
#--------TABLE RESULTS-----------#
library(dplyr)
library(knitr)
library(kableExtra)
J
library(dplyr)
library(knitr)
library(kableExtra)
kable(cor, format = "latex",digits = 3,
booktabs = T, caption = paste0("Correlation of the 12 numeric variables. The population size is equal to ",
N,"."),
row.names = FALSE,escape = FALSE)%>%
add_header_above(c(" " = 1,"Correlation" = 12),escape = F) %>%
kable_styling(font_size = 9,latex_options="scale_down")
#--Skewness
library(e1071)
skew <- rep(0,J)
for(i in 1:J){
skew[i] <- skewness(X[,i])
}
skew
col         <- colnames(X)
colnames(X) <- NULL
#----Number of simulations
nb_nr    <- 5   #---Number of random nonresponse
nb_imput <- 5   #---Number of random imputation
nb_simu  <- nb_nr*nb_imput #---Total number of simulations
#----Matrix of results
Estimate_simu <- matrix(rep(0,nb_simu*J*4*5), c(nb_simu,J*4*5))
for(nr_i in 1:nb_nr){
##----------------------
##  Random nonresponse
##----------------------
X_NA <- generateNA(X, pp, nr_min = 50)
for(imput_i in 1:nb_imput){
set.seed(imput_i)
##--------------
##  Imputation
##--------------
#---Swiss cheese imputation
SW   <- swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
X_SW <- SW$X
#---Linear imputation
LI   <- linearImput(X_NA, d = NULL, k = SW$k, tol = 1e-3, max_iter = 50)
X_LI <- LI$X
#---Random hotdeck imputation
X_HD <- hotDeckImput(X_NA, k = SW$k)
##-----------
##  Results
##-----------
#--- Compute for each variable and each imputation method: total, 10-th and 90-th percentile, median, variance.
tot     <- as.vector(colSums(X))
tot_SW  <- as.vector(colSums(X_SW))
tot_LI  <- as.vector(colSums(X_LI))
tot_HD  <- as.vector(colSums(X_HD))
P10     <- as.vector(apply(X,    2, quantile, probs = 0.1))
P10_SW  <- apply(X_SW, 2, quantile, probs = 0.1)
P10_LI  <- apply(X_LI, 2, quantile, probs = 0.1)
P10_HD  <- apply(X_HD, 2, quantile, probs = 0.1)
P90     <- apply(X,    2, quantile, probs = 0.9)
P90_SW  <- apply(X_SW, 2, quantile, probs = 0.9)
P90_LI  <- apply(X_LI, 2, quantile, probs = 0.9)
P90_HD  <- apply(X_HD, 2, quantile, probs = 0.9)
P50     <- apply(X,    2, quantile, probs = 0.5)
P50_SW  <- apply(X_SW, 2, quantile, probs = 0.5)
P50_LI  <- apply(X_LI, 2, quantile, probs = 0.5)
P50_HD  <- apply(X_HD, 2, quantile, probs = 0.5)
var     <- as.vector(apply(X, 2, function(x) var(x)))
var_SW  <- as.vector(apply(X_SW, 2, function(x) var(x)))
var_LI  <- as.vector(apply(X_LI, 2, function(x) var(x)))
var_HD  <- as.vector(apply(X_HD, 2, function(x) var(x)))
#---All results
row <- (nr_i-1)*nb_imput+imput_i
print(row)
Estimate_simu[row,] <- c(tot, tot_SW, tot_LI, tot_HD,
P10, P10_SW, P10_LI, P10_HD,
P50, P50_SW, P50_LI, P50_HD,
P90, P90_SW, P90_LI, P90_HD,
var, var_SW, var_LI, var_HD)
}
}
X_NA
0.7/12
0.3/12
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-6 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-12 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-20 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-30 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-40 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-60 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-80 * X[, 3]))
}
}
colMeans(pp)
#----pp: probabilités de réponse pour chaque variable
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-100 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(1-100 * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(1-80 * X[, 3]))
}
}
colMeans(pp)
X
colnames(X)
##------------------
##  Initialization
##------------------
X <- read.csv("C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\winequality-red.csv", sep = ";")
N <- nrow(X)
J <- ncol(X)
X
cor(X)
y <- c(507,497,490,490,489,515,425,573)
x <- c(6.1,5.6,5.3,3.7,3.9,4.7,2.9,6.3)
mean(y)
mean(x)
var(x)
var(y)
sqrt(1441.69)
sqrt(1.31)
34.159/(1.14*37.97)
cov(x,y)
34.16/1.31
498.25-26.08*4.81
0.79^2
372.81 + 26.08*4.5
129.238 + 0.771*492
x <- c(8,11,10,13,9,17)
y <- c(5,7,16,6,12,14)
plot(x,y)
ggplot(cbind(x,y), aes(x=wt, y=mpg)) +
geom_point()+
geom_smooth(method=lm, se=FALSE)
library(ggplot2)
ggplot(cbind(x,y), aes(x=wt, y=mpg)) +
geom_point()+
geom_smooth(method=lm, se=FALSE)
ggplot(data.frame(cbind(x,y)), aes(x=wt, y=mpg)) +
geom_point()+
geom_smooth(method=lm, se=FALSE)
data.frame(cbind(x,y))
ggplot(data.frame(cbind(x,y)), aes(x=x, y=y)) +
geom_point()+
geom_smooth(method=lm, se=FALSE)
ggplot(data.frame(cbind(x,y)), aes(x=x, y=y)) +
geom_point()
ggplot(data.frame(cbind(x,y)), aes(x=x, y=y)) +
geom_point()+theme_classic()
ggplot(data.frame(cbind(x,y)), aes(x=x, y=y)) +
geom_point()
ggplot(data.frame(cbind(x,y)), aes(x=x, y=y)) +
geom_point()
+labs(x="Note", y = "Avis")+theme_classic()
ggplot(data.frame(cbind(x,y)), aes(x=x, y=y)) +
geom_point()+labs(x="Note", y = "Avis")+theme_classic()
library(tikzDevice)
tikz(file = "C:\\Users\\eustachee\\Cours_2020_2021\\TP11_plot.tex", width=5.81268, height = 4,standAlone = FALSE)
library(tikzDevice)
tikz(file = "C:\\Users\\eustachee\\switchdrive\\cours\\2020-2021\\TP11_plot.tex", width=5.81268, height = 4,standAlone = FALSE)
tikz(file = "C:\\Users\\eustachee\\switchdrive\\cours\\2020-2021\\TP11_plot.tex", width=5, height = 5,standAlone = FALSE)
tikz(file = "C:\\Users\\eustachee\\switchdrive\\cours\\2020-2021\\TP11_plot.tex", width=5, height = 5,standAlone = FALSE)
5.546 +0.393 * 13
10.66-6
2*0.393
(15-5.546)/0.393
# Add R commands.
data(MU284)
# Add R commands.
library(sampling)
data(MU284)
head(MU284)
df <- MU284[ ,2:5]
df
library(sampling)
data(MU284)
df <- MU284[ ,2:5]
head(df)
N  <- 600
##---Gamma variables
g1 <- rgamma(N, shape = 7, rate = 0.2)
g2 <- rgamma(N, shape = 5, rate = 0.4)
g3 <- rgamma(N, shape = 9, rate = 0.1)
g4 <- rgamma(N, shape = 3, rate = 0.4)
##---Correlated variables from the gamma variables
V1 <- g1
V2 <- g1+g2
V3 <- g1-g3
V4 <- g1-g4
V5 <- (g1>35)*1
cor(cbind(V1,V2,V3,V4,V5))
##---Final data set
X <- cbind(V1,V2,V3,V4,V5)
J <- ncol(X)
#----pp: probabilités de réponse pour chaque variable
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.105* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
generateNA <- function(X, pp, nr_min)
{
#----Response indicator matrix: r
nr <- 1
r  <- matrix(rep(0,N*J), c(N,J))
while(nr < nr_min) {
for(j in 1:J){
r[,j] <- UPpoisson(pp[,j])
}
nr <- sum(rowSums(r) == J)			# Number of respondent
}
#----Add NA to matrix X
for(i in 1:ncol(X)){
X[r[,i] == 0,i] <- NA
}
return(X)
}
X_NA
na.omit(X_NA)
nrow(na.omit(X_NA))
nrow(X_NA)
colMeans(pp)
library(fastDummies)
library(sampling)
library(bannerCommenter)
library(StratifiedSampling)
N  <- 150
##---Gamma variables
g1 <- rgamma(N, shape = 7, rate = 0.2)
g2 <- rgamma(N, shape = 5, rate = 0.4)
##---Correlated variables from the gamma variables
V1 <- g1
V2 <- g1+g2
V3 <- (g1>35)*1
cor(cbind(V1,V2,V3))
##---Final data set
X <- cbind(V1,V2,V3)
J <- ncol(X)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.105* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
pp
colMeans(pp)
1-0.3/3
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.2* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.08* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.2) * X[, 3]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.2) * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.2 * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.15 * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.02 * X[, 2]))
}
}
colMeans(pp)
#----pp: probabilités de réponse pour chaque variable
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.1 * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.08 * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.06 * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.05 * X[, 2]))
}
}
colMeans(pp)
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.075* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-0.055 * X[, 2]))
}
}
colMeans(pp)
generateNA <- function(X, pp, nr_min)
{
#----Response indicator matrix: r
nr <- 1
r  <- matrix(rep(0,N*J), c(N,J))
while(nr < nr_min) {
for(j in 1:J){
r[,j] <- UPpoisson(pp[,j])
}
nr <- sum(rowSums(r) == J)			# Number of respondent
}
#----Add NA to matrix X
for(i in 1:ncol(X)){
X[r[,i] == 0,i] <- NA
}
return(X)
}
X_NA <- generateNA(X, pp, nr_min = 10)
X_NA
nrow(na.omit(X_NA))
120/150
nr <- nrow(na.omit(X_NA))
nr
nm <- nrow(is.na(X_NA))
nm
nm <- nrow(NA%in%X_NA)
nm
lapply(X_NA, 1, function(x) NA%in%x)
lapply(X_NA, function(x) NA%in%x)
sapply(X_NA, function(x) NA%in%x)
na.omit(X_NA)
!na.omit(X_NA)
na.omit(X_NA)
na.omit(X_NA)$attr(,"na.action")
attr(na.omit(X_NA),"na.action")
!attr(na.omit(X_NA),"na.action")
?na.omit
na.action(X_NA)
is.na(X_NA)
sum(is.na(X_NA))
library(cranlogs)
library(ggplot2)
cran_downloads(packages="SpotSampling", when="last-week")
cran_downloads(packages="WaveSampling", when="last-week")
cran_downloads(packages="SpotSampling", when="last-month")
cran_downloads(packages="WaveSampling", when="last-month")
33/150
X_NA
nrow(na.omit(X_NA))
sum(is.na(X_NA))
swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
devtools::load_all("C:/Users/eustachee/switchdrive/Swiss cheese/subject_1/SwissCheese/R")
swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
library(StratifiedSampling)
swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
sum(is.na(X_NA))
SW      <- swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
SW$k
X_imput <- SW$X
sum(is.na(X_imput))
swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
SW      <- swissCheeseImput(X = X_NA, d = NULL, k = NULL, tol = 1e-3, max_iter = 50)
getwd()
