# library(SwissCheese)
##----------------------------------------------------------------
##                        Initialization                         -
##----------------------------------------------------------------
N  <- 600
##---Gamma variables
g1 <- rgamma(N, shape = 7, rate = 0.2)
g2 <- rgamma(N, shape = 5, rate = 0.4)
g3 <- rgamma(N, shape = 9, rate = 0.1)
g4 <- rgamma(N, shape = 3, rate = 0.4)
##---Correlated variables from the gamma variables
V1 <- g1
V2 <- g1+g2
V3 <- g1-g3
V4 <- g1-g4
V5 <- (g1>35)*1
cor(cbind(V1,V2,V3,V4,V5))
##---Final data set
X <- cbind(V1,V2,V3,V4,V5)
J <- ncol(X)
#----pp: probabilités de réponse pour chaque variable
pp <- matrix(rep(0,N*J), c(N,J))
for(j in 1:J){
if((j %% 2) != 0){
pp[,j] <- 1 / (1 + exp(-0.105* X[, 1]))
}else{
pp[,j] <- 1 / (1 + exp(-(-0.15) * X[, 3]))
}
}
generateNA <- function(X, pp, nr_min)
{
#----Response indicator matrix: r
nr <- 1
r  <- matrix(rep(0,N*J), c(N,J))
while(nr < nr_min) {
for(j in 1:J){
r[,j] <- UPpoisson(pp[,j])
}
nr <- sum(rowSums(r) == J)			# Number of respondent
}
#----Add NA to matrix X
for(i in 1:ncol(X)){
X[r[,i] == 0,i] <- NA
}
return(X)
}
funImput <- function(imput_i, df, X_NA){
# set.seed(imput_i)
X <- df
##--------------
##  Imputation
##--------------
#---Swiss cheese imputation
SW   <- swissCheeseImput(X = X_NA, d = NULL, k = 10, tol = 1e-2, max_iter = 50)
X_SW <- SW$X_new
#---Deterministic imputation
LI   <- deterministicImput(X_NA, d = NULL, k = SW$k, tol = 1e-2, max_iter = 50)
X_LI <- LI$X_new
#---Random hotdeck imputation
X_HD <- hotDeckImput(X_NA, k = NULL)
#---Random hotdeck imputation knn
X_HD_k <- hotDeckImput(X_NA, k = SW$k)
##-----------
##  Results
##-----------
#--- Compute for each variable and each imputation method: total, 10-th and 90-th percentile, median, variance.
tot       <- as.vector(colSums(X))
tot_SW    <- as.vector(colSums(X_SW))
tot_LI    <- as.vector(colSums(X_LI))
tot_HD    <- as.vector(colSums(X_HD))
tot_HD_k  <- as.vector(colSums(X_HD_k))
P10       <- as.vector(apply(X,    2, quantile, probs = 0.1))
P10_SW    <- apply(X_SW, 2, quantile, probs = 0.1)
P10_LI    <- apply(X_LI, 2, quantile, probs = 0.1)
P10_HD    <- apply(X_HD, 2, quantile, probs = 0.1)
P10_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.1)
P90       <- apply(X,    2, quantile, probs = 0.9)
P90_SW    <- apply(X_SW, 2, quantile, probs = 0.9)
P90_LI    <- apply(X_LI, 2, quantile, probs = 0.9)
P90_HD    <- apply(X_HD, 2, quantile, probs = 0.9)
P90_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.9)
P50       <- apply(X,    2, quantile, probs = 0.5)
P50_SW    <- apply(X_SW, 2, quantile, probs = 0.5)
P50_LI    <- apply(X_LI, 2, quantile, probs = 0.5)
P50_HD    <- apply(X_HD, 2, quantile, probs = 0.5)
P50_HD_k  <- apply(X_HD_k, 2, quantile, probs = 0.5)
var       <- as.vector(apply(X,    2, function(x) var(x)))
var_SW    <- as.vector(apply(X_SW, 2, function(x) var(x)))
var_LI    <- as.vector(apply(X_LI, 2, function(x) var(x)))
var_HD    <- as.vector(apply(X_HD, 2, function(x) var(x)))
var_HD_k  <- as.vector(apply(X_HD_k, 2, function(x) var(x)))
#--- Compute for each variable and each imputation method: the covariances.
cov       <-  c(cov(X)[-1,1],cov(X)[-c(1,2),2],cov(X)[-c(1,2,3),3],cov(X)[-c(1,2,3,4),4])
cov_SW    <-  c(cov(X_SW)[-1,1],cov(X_SW)[-c(1,2),2],cov(X_SW)[-c(1,2,3),3],cov(X_SW)[-c(1,2,3,4),4])
cov_LI    <-  c(cov(X_LI)[-1,1],cov(X_LI)[-c(1,2),2],cov(X_LI)[-c(1,2,3),3],cov(X_LI)[-c(1,2,3,4),4])
cov_HD    <-  c(cov(X_HD)[-1,1],cov(X_HD)[-c(1,2),2],cov(X_HD)[-c(1,2,3),3],cov(X_HD)[-c(1,2,3,4),4])
cov_HD_k  <-  c(cov(X_HD_k)[-1,1],cov(X_HD_k)[-c(1,2),2],cov(X_HD_k)[-c(1,2,3),3],cov(X_HD_k)[-c(1,2,3,4),4])
#---All results
Estimate_simu <- c(tot, tot_SW, tot_LI, tot_HD, tot_HD_k,
P10, P10_SW, P10_LI, P10_HD, P10_HD_k,
P50, P50_SW, P50_LI, P50_HD, P50_HD_k,
P90, P90_SW, P90_LI, P90_HD, P90_HD_k,
var, var_SW, var_LI, var_HD, var_HD_k)
Cov_simu      <- c(cov, cov_SW, cov_LI, cov_HD, cov_HD_k)
return(list(Estimate_simu = Estimate_simu, Cov_simu = Cov_simu, k = SW$k))
}
##----------------------------------------------------------------
##                    parallelized simulations                   -
##----------------------------------------------------------------
library(parallel)
#---- Define cluster
cl <- makeCluster(detectCores())
clusterEvalQ(cl,{
#---packages for simulations
devtools::load_all(".")
library(sampling)
library(StratifiedSampling)
})
col         <- colnames(X)
colnames(X) <- NULL
#----Number of simulations
nb_nr    <- 100   #---Number of random nonresponse
nb_imput <- 100   #---Number of random imputation
nb_simu  <- nb_nr*nb_imput #---Total number of simulations
#----Number of neighbors
Neighbors_k   <- rep(0, nb_nr)
for(nr_i in 44:nb_nr){
#--- To store the results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
#---Random nonresponse
X_NA <- generateNA(X, pp, nr_min = 50)
#---Paralyzed simulations
l <- parLapply(cl = cl,
X = 1:nb_imput,
fun = funImput,
df = X,
X_NA = X_NA)
#---Save results
Estimate_simu <- matrix(rep(0,nb_imput*J*5*5), c(nb_imput,J*5*5))
Cov_simu      <- matrix(rep(0,nb_imput*10*5), c(nb_imput,10*5))
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_3\\'
for(i in 1:nb_imput){
Estimate_simu[i,] <- l[[i]]$Estimate_simu
Cov_simu[i,]      <- l[[i]]$Cov_simu
}
write.csv(Estimate_simu, file=paste0(path,"estimate_simu_",nr_i,".csv"))
write.csv(Cov_simu, file=paste0(path,"cov_simu_",nr_i,".csv"))
Neighbors_k[nr_i] <- l[[1]]$k
}
3.5*2.7
10*0.1
10*0.03
12*0.1
10*0.12
450/35
13*5.10
0.1/0.65
0.5/0.65
0.05/0.65
780/19
41*2.99
66+122
0.2/0.65
0.3/0.65
460/19
24*4.50
310/22
14*2.99
300/22
1.5/0.65
1/0.65
7.80*1.5
190*1.5
122*1.5
183+66
200*1.5
2.10*1.5
150*1.5
225+66
300/22
14*2.99
1000/19
52*4.5
1.13*400
0.13*400
2*38
1500/400
4*26
1/3
1.5/3
1/3.3
1.5/3.3
720*1.5
3*38
165*1.5
1.5/250
1500/250
1500/6
1/6
38+104+114+50
14*5.10
3*0.7
1.2
720*1.2
165*1.2
300*1.2
360/35
11*7.99
38+104+76+50+87
#---Download results
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_4\\'
df   <- read.csv(paste0(path,'estimate_simu_1.csv'))
for(i in 2:100){
df <- rbind(df,read.csv(paste0(path,'estimate_simu_',i,'.csv')))
}
df <- df[,-1]
head(df)
num_method <- 4 # number of methods compared
tot <- (0*(num_method+1)*J+1):(1*(num_method+1)*J)
P10 <- (1*(num_method+1)*J+1):(2*(num_method+1)*J)
P50 <- (2*(num_method+1)*J+1):(3*(num_method+1)*J)
P90 <- (3*(num_method+1)*J+1):(4*(num_method+1)*J)
var <- (4*(num_method+1)*J+1):(5*(num_method+1)*J)
param_tot <- df[,tot]
resTot <- resultSimu(param = param_tot, J) # à adapter en fonction des méthodes à comparer
param_var <- df[,var]
resVar <- resultSimu(param = param_var, J) # à adapter en fonction des méthodes à comparer
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
param_var
param_P10
param_P50
head(param_P90)
choose(J,2)
?choose
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_4\\'
df_cov   <- read.csv(paste0(path,'cov_simu_1.csv'))
for(i in 2:100){
df_cov <- rbind(df_cov,read.csv(paste0(path,'cov_simu_',i,'.csv')))
}
df_cov <- df_cov[,-1]
head(df_cov[,1:10])
resVar
resultSimu <- function(param,J) {
n <- nrow(param)
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
#---Bias and RMSE of the estimate parameter of simulations (ex: total, P10, etc)
#-------Relative bias
B_SW   <- colMeans(abs(param[,(J+1):(2*J)]   - rep(1,n)%*%as.matrix(theta)))
B_LI   <- colMeans(abs(param[,(2*J+1):(3*J)] - rep(1,n)%*%as.matrix(theta)))
B_HD   <- colMeans(abs(param[,(3*J+1):(4*J)] - rep(1,n)%*%as.matrix(theta)))
B_HD_k <- colMeans(abs(param[,(4*J+1):(5*J)] - rep(1,n)%*%as.matrix(theta)))
#-------RMSE
RMSE_SW   <- sqrt(colMeans((param[,(J+1):(2*J)]   - rep(1,n)%*%as.matrix(theta))^2))
RMSE_LI   <- sqrt(colMeans((param[,(2*J+1):(3*J)] - rep(1,n)%*%as.matrix(theta))^2))
RMSE_HD   <- sqrt(colMeans((param[,(3*J+1):(4*J)] - rep(1,n)%*%as.matrix(theta))^2))
RMSE_HD_k <- sqrt(colMeans((param[,(4*J+1):(5*J)] - rep(1,n)%*%as.matrix(theta))^2))
#############
#---Variance of the estimate parameter according to the nonresponse
vv       <- matrix(rep(0,nb_nr*J*5), ncol = J*5) # to store the variance of the parameter for each nonresponse
vect_nr  <- rep(1:nb_nr, each = nb_imput)
for (nr_i in  1:nb_nr) {
#-------Mean for the imputation of nonresponse nr_i
mean_i    <- colMeans(param[vect_nr == nr_i,])
mean_ii   <- matrix(rep(mean_i, nb_imput), byrow=TRUE, ncol=J*5)
#-------vv: Variances^2 of the parameter for the nb_nr nonresponse in rows
vv[nr_i,] <- colSums((param[vect_nr == nr_i,] - mean_ii)^2) / (nb_imput-1)
}
#-------Variance
var_nr_SW   <- sqrt(colMeans(vv[,(1*J+1):(2*J)]))
var_nr_LI   <- sqrt(colMeans(vv[,(2*J+1):(3*J)]))
var_nr_HD   <- sqrt(colMeans(vv[,(3*J+1):(4*J)]))
var_nr_HD_k <- sqrt(colMeans(vv[,(4*J+1):(5*J)]))
#############
#-------Final results
B    <- round(rbind(B_SW = B_SW,        B_LI = B_LI,        B_HD = B_HD,        B_HD_k = B_HD),          4)
RMSE <- round(rbind(RMSE_SW = RMSE_SW,  RMSE_LI = RMSE_LI,  RMSE_HD = RMSE_HD,  RMSE_HD_k = RMSE_HD_k),  4)
V    <- round(rbind(Var_SW = var_nr_SW, Var_LI = var_nr_LI, Var_HD = var_nr_HD, Var_HD_k = var_nr_HD_k), 4)
return(list(B = B, RMSE = RMSE, V = V))
}
#---Download results
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_5\\'
df   <- read.csv(paste0(path,'estimate_simu_1.csv'))
for(i in 2:100){
df <- rbind(df,read.csv(paste0(path,'estimate_simu_',i,'.csv')))
}
df <- df[,-1]
num_method <- 4 # number of methods compared
tot <- (0*(num_method+1)*J+1):(1*(num_method+1)*J)
P10 <- (1*(num_method+1)*J+1):(2*(num_method+1)*J)
P50 <- (2*(num_method+1)*J+1):(3*(num_method+1)*J)
P90 <- (3*(num_method+1)*J+1):(4*(num_method+1)*J)
var <- (4*(num_method+1)*J+1):(5*(num_method+1)*J)
param_tot <- df[,tot]
resTot <- resultSimu(param = param_tot, J) # à adapter en fonction des méthodes à comparer
param_var <- df[,var]
resVar <- resultSimu(param = param_var, J) # à adapter en fonction des méthodes à comparer
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
head(resTot)
head(param_tot)
head(param_P10)
head(param_P50)
head(param_P90)
head(param_var)
#---Download results covariance
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_5\\'
df_cov   <- read.csv(paste0(path,'cov_simu_1.csv'))
for(i in 2:100){
df_cov <- rbind(df_cov,read.csv(paste0(path,'cov_simu_',i,'.csv')))
}
df_cov <- df_cov[,-1]
#---Each parameter of variance/covariance
resCov <- resultSimuCov(param = df_cov, J) # à adapter en fonction des méthodes à comparer
resCov
df_cov
df_cov[]1,1:10
df_cov[1,1:10]
param_tot
nrow(df)
param_tot
param_tot[1:1000]
param_tot[,1:1000]
param_tot[1:1000,]
1000*(i-1)+1,1000*i
1000*(i-1)+1:1000*i
i
i=1
(100*(i-1)+1):(100*i)
i=2
(100*(i-1)+1):(100*i)
par_tot_i <- param_tot[(100*(i-1)+1):(100*i)]
resultSimu(param = par_tot_i, J)
par_tot_i <- param_tot[(100*(i-1)+1):(100*i)]
par_tot_i <- param_tot[(100*(i-1)+1):(100*i),]
resultSimu(param = par_tot_i, J)
param <- param_tot*
param <- param_tot
#-------RMSE
RMSE <- rep(0,nb_nr)
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,n)%*%as.matrix(theta))^2))
}
n <- nrow(param)
RMSE <- rep(0,nb_nr)
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
RMSE <- rep(0,nb_nr)
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
warnings
warnings()
sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
#-------RMSE
RMSE <- matrix(rep(0,nb_nr*J*5), ncol = J*5)
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
colMeans(RMSE)
RMSE_SW   <- colMeans(RMSE)[(J+1):(2*J)]
RMSE_LI   <- colMeans(RMSE)[(2*J+1):(3*J)]
RMSE_HD   <- colMeans(RMSE)[(3*J+1):(4*J)]
RMSE_HD_k <- colMeans(RMSE)[(4*J+1):(5*J)]
RMSE_SW
RMSE_LI
RMSE_HD
colMeans(RMSE)
RMSE <- matrix(rep(0,nb_nr*J), ncol = J*5)
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_SW   <- colMeans(RMSE)
par_i[,(J+1):(2*J)]
rep(1,100)%*%as.matrix(theta)
sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
RMSE[nr_i,]
#-------RMSE
RMSE <- matrix(rep(0,nb_nr*J), ncol = J)
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
RMSE
RMSE <- matrix(rep(0,nb_nr*J), ncol = J)
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_SW   <- colMeans(RMSE)
RMSE_SW
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(2*J+1):(3*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_LI   <- colMeans(RMSE)
RMSE_LI
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(3*J+1):(4*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD   <- colMeans(RMSE)[(3*J+1):(4*J)]
RMSE_HD
RMSE_HD   <- colMeans(RMSE)
RMSE_HD
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE[nr_i,] <- sqrt(colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD_k <- colMeans(RMSE)
RMSE_HD_k
RMSE_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD_k <- RMSE_HD_k + sqrt(colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD_k <- RMSE_HD_k/nb_nr
RMSE_HD_k
RMSE_SW <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_SW <- RMSE_SW+sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_SW   <- colMeans(RMSE)
RMSE_LI <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE <- RMSE_LI+sqrt(colMeans((par_i[,(2*J+1):(3*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_LI   <- RMSE_LI/nb_nr
RMSE_HD <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD <- RMSE_HD+sqrt(colMeans((par_i[,(3*J+1):(4*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD   <- RMSE_HD/nb_nr
RMSE_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD_k <- RMSE_HD_k + sqrt(colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD_k <- RMSE_HD_k/nb_nr
RMSE_LI
RMSE_SW <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_SW <- RMSE_SW+sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_SW   <- colMeans(RMSE)
RMSE_LI <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_LI <- RMSE_LI+sqrt(colMeans((par_i[,(2*J+1):(3*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_LI   <- RMSE_LI/nb_nr
RMSE_HD <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD <- RMSE_HD+sqrt(colMeans((par_i[,(3*J+1):(4*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD   <- RMSE_HD/nb_nr
RMSE_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD_k <- RMSE_HD_k + sqrt(colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD_k <- RMSE_HD_k/nb_nr
RMSE_SW <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_SW <- RMSE_SW+sqrt(colMeans((par_i[,(J+1):(2*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_SW   <- RMSE_SW/nb_nr
RMSE_LI <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_LI <- RMSE_LI+sqrt(colMeans((par_i[,(2*J+1):(3*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_LI   <- RMSE_LI/nb_nr
RMSE_HD <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD <- RMSE_HD+sqrt(colMeans((par_i[,(3*J+1):(4*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD   <- RMSE_HD/nb_nr
RMSE_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i <- param[(100*(i-1)+1):(100*i),]
RMSE_HD_k <- RMSE_HD_k + sqrt(colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,100)%*%as.matrix(theta))^2))
}
RMSE_HD_k <- RMSE_HD_k/nb_nr
RMSE_SW
RMSE_LI
RMSE_HD
RMSE_HD_k
104.13+26.27^2
sqrt(104.13+26.27^2)
