p     <- inclusionprobabilities(yy+mean(yy)/n,n*miss)
y[runif(n)<p] <- NA
X[,i] <- y
}
return(X)
}
X_NA <- generateNA(X)
X_NA <- X_NA[!apply(X_NA, 1, function(x) all(is.na(x))),]
X_NA
k    <- 5
#---Swiss cheese imputation with linear programming (deterministic)
X_LI  <- lpSparseSwissCheese_1(X_NA, k_min = k, rand = FALSE)
getwd()
#---packages for simulations
devtools::load_all("SwissCheese\\.")
#---Swiss cheese imputation with linear programming (deterministic)
X_LI  <- lpSparseSwissCheese_1(X_NA, k_min = k, rand = FALSE)
#---Swiss cheese imputation with linear programming (deterministic)
X_LI1 <- lpSparseSwissCheese(X_NA, k_min = NULL, rand = FALSE)
X_LI
X_LI1
#---Swiss cheese imputation with linear programming (deterministic)
X_LI1 <- lpSparseSwissCheese(X_NA, k_min = NULL, rand = FALSE, test = TRUE)
install.packages("mplot")
library(mplot)
data(bodyfat)
full.mod = lm(Bodyfat~.,data=subset(bodyfat,select=-Id))
summary(full.mod)
XX
X_NA
na.omit(X_NA)
na.omit(X_NA)[1:15,]
apply(X_NA, 1, function(x) any(is.na(x)))
X_NA
X_NA[1,]
is.na(X_NA[1,])
apply(X_NA, 1, function(x) all(!is.na(x)))
df_2 <- X_NA[apply(X_NA, 1, function(x) all(!is.na(x))),]
df_2
df_2 <- X_NA[apply(X_NA, 1, function(x) any(is.na(x))),]
df_2
df_2 <- X_NA[apply(X_NA, 1, function(x) any(is.na(x))),][1,]
rbind(df_1,df_2)
df_1 <- na.omit(X_NA)[1:15,]
df_2 <- X_NA[apply(X_NA, 1, function(x) any(is.na(x))),][1,]
rbind(df_1,df_2)
t(rbind(df_1,df_2))
X_NA
X_NA
X <- X_NA
##------------------
##  Initialization
##------------------
eps <- 1e-3
#--- Standardized data
X_init <- X
var_0 <- which(!apply(X, 2, function(x) sd(x[!is.na(x)]) == 0))
X0 <- X[,var_0]
for(i in 1:length(var_0)){
X0[!is.na(X0[,i]),i] <- as.vector(scale(X0[!is.na(X0[,i]),i]))
}
d = NULL
w = NULL
k_min = 5
k_max = 30
rand = TRUE
test = TRUE
##------------------
##  Initialization
##------------------
eps <- 1e-3
#--- Standardized data
X_init <- X
var_0 <- which(!apply(X, 2, function(x) sd(x[!is.na(x)]) == 0))
X0 <- X[,var_0]
for(i in 1:length(var_0)){
X0[!is.na(X0[,i]),i] <- as.vector(scale(X0[!is.na(X0[,i]),i]))
}
X[,var_0] <- X0
N  <- nrow(X)
r  <- (!is.na(X))*1                                   # r: matrix of responds
Sr <- which(apply(r, 1, function(x) !any(0 %in% x)))  # Sr: responding units
Sm <- which(apply(r, 1, function(x) any(0 %in% x)))   # Sm: nonresponding units
nr <- length(Sr)                                      # nr: number of respondents
nm <- length(Sm)                                      # nm: number of nonrespondents
Rr  <- r[Sm,]                      # r: matrix of responds among the nonrespondents
X[is.na(X)] <- 0
Xr <- as.matrix(X[Sr,])
Xm <- as.matrix(X[Sm,])
if(is.null(d)){ d <- rep(1, N) }
dr <- d[Sr]
dm <- d[Sm]
#-------Variable with at least 2 respondents
TEST <- which(colSums(Rr) != 0)
Xr   <- Xr[,TEST]
Xm   <- Xm[,TEST]
R    <- Rr[,TEST]
J    <- ncol(Xr)
##---Compute the Euclidean distance between respondents and non respondents
if(is.null(w)){ w <- rep(1, J) }
if(is.null(k_max)){ k_max <- nr }
D   <- rep(0, k_max*nm)
ind <- rep(0, k_max*nm)
for(i in 1:nm){
d_tmp                          <- (sqrt(rowSums(t(t(Xr)*R[i,]*w-Xm[i,]*R[i,]*w)^2)))/sum(R[i,])
ind[((i-1)*k_max+1):(i*k_max)] <- which(order(d_tmp) %in% (1:k_max))
D[((i-1)*k_max+1):(i*k_max)]   <- d_tmp[which(order(d_tmp) %in% (1:k_max))]
}
##-----------------------------------
##  First condition for convergence
##-----------------------------------
tot_m     <- colSums(Xm)
for(j in 1:J){
R1_j      <- which(R[,j] == 1)
sum_max_j <- 0
for(v in R1_j){
ind_tmp   <- ind[((v-1)*k_max+1):(v*k_max)]
sum_max_j <- sum_max_j+max(Xr[ind_tmp,j])
}
if(sum_max_j<tot_m[j]){ stop('k_max must be bigger.') }
}
C_sparse <- NULL
for(j in 1:ncol(Xm)){
for(v in 1:nm){
ind_tmp <- ind[((v-1)*k_max+1):(v*k_max)]
C_v <- rep(0,k_max)
for(u in 1:k_max){
u_ind  <- ind_tmp[u]
C_v[u] <- dm[v]*R[v,j]*Xr[u_ind,j]
}
non_0    <- abs(C_v)>1e-8
if(any(non_0)){
C_sparse <- rbind(C_sparse, cbind(rep(j, sum(non_0)), (((v-1)*k_max+1):(v*k_max))[non_0], C_v[non_0]))
}
}
}
B1 <- colSums(dm*R*Xm)
##---constraints of summing to 1
move     <- max(C_sparse[,1])
I_sparse <- cbind(rep(1:nm, each = k_max)+move, 1:(nm*k_max), rep(1,nm*k_max))
B2 <- rep(1,nm)
##--- concatenation of the constraints
A_tmp    <- rbind(C_sparse, I_sparse)
A_sparse <- slam::simple_triplet_matrix(i = A_tmp[,1], j = A_tmp[,2], v = A_tmp[,3], nrow = max(A_tmp[,1]), ncol = max(A_tmp[,2]), dimnames = NULL)
B        <- c(B1, B2)
##--The linear program
dir_sparse <- rep("==", length(B1)+length(B2))
if(!is.null(k_min)){
p      <- 1/k_min
bounds <- list(upper = list(ind = 1:max(A_tmp[,2]), val = rep(p,max(A_tmp[,2]))))
lp_res <- Rglpk::Rglpk_solve_LP(obj = D,
mat = A_sparse,
dir = dir_sparse,
rhs = B,
max = FALSE,
bounds)$solution
}else{
lp_res <- Rglpk::Rglpk_solve_LP(obj = D,
mat = A_sparse,
dir = dir_sparse,
rhs = B,
max = FALSE)$solution
}
if(all(lp_res < 1e-6)){ stop('No feasible solution found for the linear program.') }
##----------------------
##  Imputation matrix
##----------------------
#--farthest possible donor
farthest <- rep(0,nm)
for(v in 1:nm){
d_tmp       <- D[((v-1)*k_max+1):(v*k_max)] #distance between respondents and nonrespondent=v
ind_tmp     <- ind[((v-1)*k_max+1):(v*k_max)]  #indices of the respondents
non_0       <- which(lp_res[((v-1)*k_max+1):(v*k_max)]>1e-6)
farthest[v] <- max(rank(d_tmp)[non_0])
}
prob_imp     <- rep(0,nr*nm)
for(v in 1:nm){
prob_tmp                                 <- rep(0,nr)
prob_tmp[ind[((v-1)*k_max+1):(v*k_max)]] <- lp_res[((v-1)*k_max+1):(v*k_max)]
prob_imp[((v-1)*nr+1):(v*nr)]            <- prob_tmp
}
# ###############################################################################
if(test){
##--------CHECK CONSTRAINTS--------##
##---Constraints of calibration
C  <- matrix(rep(0, k_max*nm*ncol(Xm)), nrow = ncol(Xm))
for(j in 1:(ncol(Xm))){
C1 <- matrix(rep(0, nm*k_max), ncol = nm, nrow = k_max)
for(v in 1:nm){
ind_tmp <- ind[((v-1)*k_max+1):(v*k_max)]
for(u in 1:k_max){
u_ind   <- ind_tmp[u]
C1[u,v] <- dm[v]*R[v,j]*Xr[u_ind,j]
}
}
C[j,] <- as.vector(C1)  # matrix of constraints
}
B1 <- colSums(dm*R*Xm) # matrix of the right hand side of the constraint equation
##---constraints of summing to 1
I <- matrix(rep(0,k_max*nm*nm), nrow = nm)
for(v in 1:nm){
I[v,((v-1)*k_max+1):(v*k_max)] <- 1
}
B2 <- rep(1,nm)
##--- concatenation of the constraints
A <- rbind(C, I)
B <- c(B1, B2)
if(all(((A%*%prob_imp)-B)<1e-6)){ cat('Constraints of the program are met') }
}
B
ind_tmp
ind[((v-1)*k_max+1):(v*k_max)]
ind_tmp[u]
A
dim(A)
nm
nr
dim(prob)
dim(prob_imp)
length(prob_imp)
u_ind
((v-1)*k_max+1):(v*k_max)
##---constraints of summing to 1
I <- matrix(rep(0,nr*nm*nm), nrow = nm)
for(v in 1:nm){
I[v,((v-1)*k_max+1):(v*k_max)] <- 1
}
##---Constraints of calibration
C  <- matrix(rep(0, k_max*nm*ncol(Xm)), nrow = ncol(Xm))
for(j in 1:(ncol(Xm))){
C1 <- matrix(rep(0, nm*k_max), ncol = nm, nrow = nr)
for(v in 1:nm){
ind_tmp <- ind[((v-1)*k_max+1):(v*k_max)]
for(u in 1:k_max){
u_ind   <- ind_tmp[u]
C1[u_ind,v] <- dm[v]*R[v,j]*Xr[u_ind,j]
}
}
C[j,] <- as.vector(C1)  # matrix of constraints
}
B1 <- colSums(dm*R*Xm) # matrix of the right hand side of the constraint equation
##---constraints of summing to 1
I <- matrix(rep(0,nr*nm*nm), nrow = nm)
for(v in 1:nm){
I[v,((v-1)*nr+1):(v*nr)] <- 1
}
##---Constraints of calibration
C  <- matrix(rep(0, nr*nm*ncol(Xm)), nrow = ncol(Xm))
for(j in 1:(ncol(Xm))){
C1 <- matrix(rep(0, nm*k_max), ncol = nm, nrow = nr)
for(v in 1:nm){
ind_tmp <- ind[((v-1)*k_max+1):(v*k_max)]
for(u in 1:k_max){
u_ind   <- ind_tmp[u]
C1[u_ind,v] <- dm[v]*R[v,j]*Xr[u_ind,j]
}
}
C[j,] <- as.vector(C1)  # matrix of constraints
}
B1 <- colSums(dm*R*Xm) # matrix of the right hand side of the constraint equation
##---constraints of summing to 1
I <- matrix(rep(0,nr*nm*nm), nrow = nm)
as.vector(C1)
C[j,]
##---Constraints of calibration
C  <- matrix(rep(0, nr*nm*ncol(Xm)), nrow = ncol(Xm))
j <- 1
C1 <- matrix(rep(0, nm*k_max), ncol = nm, nrow = nr)
for(v in 1:nm){
ind_tmp <- ind[((v-1)*k_max+1):(v*k_max)]
for(u in 1:k_max){
u_ind   <- ind_tmp[u]
C1[u_ind,v] <- dm[v]*R[v,j]*Xr[u_ind,j]
}
}
##---Constraints of calibration
C  <- matrix(rep(0, nr*nm*ncol(Xm)), nrow = ncol(Xm))
for(j in 1:(ncol(Xm))){
C1 <- matrix(rep(0, nm*nr), ncol = nm, nrow = nr)
for(v in 1:nm){
ind_tmp <- ind[((v-1)*k_max+1):(v*k_max)]
for(u in 1:k_max){
u_ind   <- ind_tmp[u]
C1[u_ind,v] <- dm[v]*R[v,j]*Xr[u_ind,j]
}
}
C[j,] <- as.vector(C1)  # matrix of constraints
}
B1 <- colSums(dm*R*Xm) # matrix of the right hand side of the constraint equation
##---constraints of summing to 1
I <- matrix(rep(0,nr*nm*nm), nrow = nm)
for(v in 1:nm){
I[v,((v-1)*nr+1):(v*nr)] <- 1
}
B2 <- rep(1,nm)
##--- concatenation of the constraints
A <- rbind(C, I)
B <- c(B1, B2)
if(all(((A%*%prob_imp)-B)<1e-6)){ cat('Constraints of the program are met') }
length(ind)
roxygen2::roxygenise()
roxygen2::roxygenise("SwissCheese\\.")
devtools::load_all("SwissCheese\\.")
lpSparseSwissCheese_1(X_NA, k_max = 10, test = TRUE)
Xm_init      <- as.matrix(X_init[Sm,])
Xm_init[!Rr] <- 0
Xr_init      <- as.matrix(X_init[Sr,])
M_imput <- matrix(StratifiedSampling::stratifiedcube(X = as.matrix(rep(0,length(prob_imp))), strata = rep(1:nm,each = nr), pik = prob_imp), byrow = FALSE, ncol = nm)
for(i in 1:nm){
Xm_init[i,] <- Rr[i,]*Xm_init[i,] + (1-Rr[i,])*Xr_init[M_imput[,i] > (1-1e-6),]
}
prob_imp
M_prob   <- matrix(rep(0,nr*nm), ncol = nm, nrow = nr)
for(v in 1:nm){
M_prob[ind[((v-1)*k_max+1):(v*k_max)],v] <- prob_imp[((v-1)*k_max+1):(v*k_max)]
}
dim(prob_imp)
M_prob   <- matrix(rep(0,nr*nm), ncol = nm, nrow = nr)
for(v in 1:nm){
M_prob[ind[((v-1)*k_max+1):(v*k_max)],v] <- prob_imp[((v-1)*nr+1):(v*nr)]
}
prob_imp[((v-1)*nr+1):(v*nr)]
M_prob   <- matrix(rep(0,nr*nm), ncol = nm, nrow = nr)
for(v in 1:nm){
M_prob[((v-1)*nr+1):(v*nr),v] <- prob_imp[((v-1)*nr+1):(v*nr)]
}
dim(prob_imp)
length(prob_imp)
as.matrix(prob_imp)
matrix(prob_imp, byrow = FALSE, nrow = nr)
colSums(matrix(prob_imp, byrow = FALSE, nrow = nr))
if(rand){
M_imput <- matrix(StratifiedSampling::stratifiedcube(X = as.matrix(rep(0,length(prob_imp))), strata = rep(1:nm,each = nr), pik = prob_imp), byrow = FALSE, ncol = nm)
for(i in 1:nm){
Xm_init[i,] <- Rr[i,]*Xm_init[i,] + (1-Rr[i,])*Xr_init[M_imput[,i] > (1-1e-6),]
}
}else{
M_prob   <- matrix(prob_imp, byrow = FALSE, nrow = nr)
for(i in 1:nm){
Xm_init[i,] <- Rr[i,]*Xm_init[i,] + (1-Rr[i,])*colSums(M_prob[,i]*Xr_init[,])
}
}
M_prob   <- matrix(prob_imp, byrow = FALSE, nrow = nr)
for(i in 1:nm){
Xm_init[i,] <- Rr[i,]*Xm_init[i,] + (1-Rr[i,])*colSums(M_prob[,i]*Xr_init[,])
}
roxygen2::roxygenise("SwissCheese\\.")
devtools::load_all("SwissCheese\\.")
lpSparseSwissCheese_1(X_NA, k_max = 10, test = TRUE)
path_esther <- 'C:\\Users\\eustachee\\switchdrive\\Godin\\stat'
path <- path_esther
library(readxl)
df <- read_excel(path = paste0(path, "all_stat.xls"))
path_esther <- 'C:\\Users\\eustachee\\switchdrive\\Godin\\stat'
path <- path_esther
df <- read_excel(path = paste0(path, "all_stat.xls"))
path_esther <- 'C:\\Users\\eustachee\\switchdrive\\Godin\\stat\\'
path <- path_esther
library(readxl)
df <- read_excel(path = paste0(path, "stat.xls"))
head(df)
df$Side
summary(df)
head(df)
#--test model mixed
#--df with only interesting data
###-- condition: slope
df_1 <- df[df$Type == 'Slopes']
#--test model mixed
#--df with only interesting data
###-- condition: slope
df_1 <- df[df$Type == 'Slopes',]
df_1
df_1 <- df_1[!is.na(df_1$DFA),]
df_1
df_1$Side
df_1$Runner
df_1
library(lme4)
head(df)
names(df)
names(df)[c(1,2,4,13)]
df_1
df_1[df_1$Time_series == 'TS']
df_1[df_1$Time_series == 'TS',]
df_2 <- df_1[df_1$Time_series == 'TS',]
df_2 <- df_1[df_1$Time_series == 'TS', names(df)[c(1,2,4)]]
df_2 <- df_1[df_1$Time_series == 'TS', c(1,2,4)]
df_3 <- df_1[df_1$Time_series == 'TS', 13]
df_3
df_3 <- as.vector(df_1[df_1$Time_series == 'TS', 13])
df_3
df_3 <- data.frame(df_1[df_1$Time_series == 'TS', 13])
df_3
df_2
as.data.frame(df_2)
df_2 <- as.data.frame(df_1[df_1$Time_series == 'TS', c(1,2,4)])
df_3 <- as.data.frame(df_1[df_1$Time_series == 'TS', 13])
df_3
df_2
gpa_mixed = lmer(df_3 ~ df_2[,-1] + (1 | df_2[,1]))
df_3
as.vector(df_3)
as.numeric(df_3)
unlist(df_3)
as.numeric(unlist(df_3))
gpa_mixed = lmer(as.numeric(unlist(df_3)) ~ df_2[,-1] + (1 | df_2[,1]))
df_2[,-1]
?lmer
data.frame(df_2[,-1] )
as.data.frame(df_2[,-1] )
y    <- as.data.frame(df_1[df_1$Time_series == 'TS', 13])
y
as.numeric(y)
as.numeric(unlist(y))
y    <- as.numeric(unlist(y))
y
df_2
type(df_2)
typeof(df_2)
do.call(rbind.data.frame, df_2)
do.call(cbind.data.frame, df_2)
df_2[,-1]
lm(y ~ df_2)
lm(y ~ data.frame(df_2))
lm(y ~ data.frame(df_2))
lm(y ~ as.matrix(df_2))
as.matrix(df_2)
as.numeric(df_2)
as.array(df_2)
as.matrix(df_2)
as.matrix(df_2)[,3]
as.numeric(as.matrix(df_2)[,3])
df_2 <- as.matrix(df_1[df_1$Time_series == 'TS', c(1,2,4)])
df_2 <- cbind(df_2[,c(1,2)], as.numeric(df_2[,3]))
lm(y ~ df_2)
df_2
y
df_2 <- data.frame((df_2[,c(1,2)], as.numeric(df_2[,3])))
#---Data
path_godin  <- 'C:\\Users\\antoi\\Documents'
path_esther <- 'C:\\Users\\eustachee\\switchdrive\\Godin\\stat\\'
path <- path_esther
library(readxl)
df <- read_excel(path = paste0(path, "stat.xls"))
df
data.frame(df)
df <- data.frame(read_excel(path = paste0(path, "stat.xls")))
df
#--test model mixed
#--df with only interesting data
###-- condition: slope
df_1 <- df[df$Type == 'Slopes',]
df_1 <- df_1[!is.na(df_1$DFA),]
df_2 <- as.matrix(df_1[df_1$Time_series == 'TS', c(1,2,4)])
df_2 <- data.frame((df_2[,c(1,2)], as.numeric(df_2[,3])))
df_2
df_2 <- df_1[df_1$Time_series == 'TS', c(1,2,4)]
df_2
lm(y ~ df_2)
data("iris")
iris
lm(iris[,1]  iris)
lm(iris[,1] ~ iris)
df_2
data.frame(df_2)
lm(y ~ data.frame(df_2))
y
data.frame(df_2)
lm(y ~ as.matrix(df_2))
as.matrix(df_2)
dim(as.matrix(df_2))
length(y)
as.matrix(df_2)
data.frame(df_2)
y
lm(y ~ df_2)
y
df_23
df_2
lm(y ~ df_2, data = cbind(df_2,y))
df_2
names(df_2)
lm(y ~ Runner + Gender + Condition, data = cbind(y,df_2))
lmer(y ~ Gender + Condition + (1 | Runner), data = cbind(y,df_2))
res <- lmer(y ~ Gender + Condition + (1 | Runner), data = cbind(y,df_2))
summary(res)
df_2
summary(df_2)
df_2[,3] <- as.numeric(df_2[,3])
summary(df_2)
df_2[,3] <- as.numeric(df_2[,3])
res <- lmer(y ~ Gender + Condition + (1 | Runner), data = cbind(y,df_2))
summary(res)
?roxygen
?roxygen
install.packages("roxygen2")
roxygen2::roxygenise()
install.packages('sampling')
install.packages('StratifiedSampling')
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages('devtools')
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages('devtools')
library(devtools)
roxygen2::roxygenise()
devtools::load_all()
