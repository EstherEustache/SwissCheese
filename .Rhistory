rbind(as.matrix(resP90$B),as.matrix(resP90$RMSE),as.matrix(resP90$V))[,-5]),
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
add_header_above(c(" " = 1,"Variables" = 5)) %>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
resTot$B
resTot$RMSE
resTot$V
round(resTot$V,2)
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
param_90
resP10
round(resP10)
round(resP10,2)
round(resP10$B,2)
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
resultSimu <- function(param,J) {
n <- nrow(param)
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
#---Bias and RMSE of the estimate parameter of simulations (ex: total, P10, etc)
#-------MSE+bias+variance of the estimate parameter of simulations (ex: total, P10, etc)
RMSE_SW   <- 0
RMSE_LI   <- 0
RMSE_HD   <- 0
RMSE_HD_k <- 0
B_SW      <- 0
B_LI      <- 0
B_HD      <- 0
B_HD_k    <- 0
var_SW   <- 0
var_LI   <- 0
var_HD   <- 0
var_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i     <- param[(100*(i-1)+1):(100*i),]
#---MSE
RMSE_HD_k <- RMSE_HD_k + colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_HD   <- RMSE_HD+colMeans((par_i[,(3*J+1):(4*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_LI   <- RMSE_LI+colMeans((par_i[,(2*J+1):(3*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_SW   <- RMSE_SW+colMeans((par_i[,(J+1):(2*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
#---Bias
B_SW   <- B_SW   + colMeans(par_i[,(J+1):(2*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_LI   <- B_LI   + colMeans(par_i[,(2*J+1):(3*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD   <- B_HD   + colMeans(par_i[,(3*J+1):(4*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD_k <- B_HD_k + colMeans(par_i[,(4*J+1):(5*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
#---Variance
mean_i   <- colMeans(par_i)
var_SW   <- var_SW   + colMeans((par_i[,(J+1):(2*J)] - rep(1,nb_imput)%*%t(mean_i[(J+1):(2*J)]))^2)
var_LI   <- var_LI   + colMeans((par_i[,(2*J+1):(3*J)] - rep(1,nb_imput)%*%t(mean_i[(2*J+1):(3*J)]))^2)
var_HD   <- var_HD   + colMeans((par_i[,(3*J+1):(4*J)] - rep(1,nb_imput)%*%t(mean_i[(3*J+1):(4*J)]))^2)
var_HD_k <- var_HD_k + colMeans((par_i[,(4*J+1):(5*J)] - rep(1,nb_imput)%*%t(mean_i[(4*J+1):(5*J)]))^2)
}
RMSE_HD_k   <- RMSE_HD_k/nb_nr
RMSE_HD     <- RMSE_HD/nb_nr
RMSE_LI     <- RMSE_LI/nb_nr
RMSE_SW     <- RMSE_SW/nb_nr
B_HD_k   <- B_HD_k/nb_nr
B_HD     <- B_HD/nb_nr
B_LI     <- B_LI/nb_nr
B_SW     <- B_SW/nb_nr
var_HD_k   <- var_HD_k/nb_nr
var_HD     <- var_HD/nb_nr
var_LI     <- var_LI/nb_nr
var_SW     <- var_SW/nb_nr
#-------Final results
B    <- round(rbind(B_HD = B_HD, B_HD_k = B_HD_k,  B_LI = B_LI, B_SW = B_SW,),          4)
RMSE <- round(rbind(RMSE_HD = RMSE_HD,  RMSE_HD_k = RMSE_HD_k,   RMSE_LI = RMSE_LI, RMSE_SW = RMSE_SW),  4)
V    <- round(rbind(Var_HD = var_HD, Var_HD_k = var_HD_k,  Var_LI = var_LI, Var_SW = var_SW), 4)
return(list(B = B, RMSE = RMSE, V = V))
}
param_tot <- df[,tot]
resTot <- resultSimu(param = param_tot, J) # à adapter en fonction des méthodes à comparer
param_var <- df[,var]
resVar <- resultSimu(param = param_var, J) # à adapter en fonction des méthodes à comparer
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
resultSimu <- function(param,J) {
n <- nrow(param)
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
#---Bias and RMSE of the estimate parameter of simulations (ex: total, P10, etc)
#-------MSE+bias+variance of the estimate parameter of simulations (ex: total, P10, etc)
RMSE_SW   <- 0
RMSE_LI   <- 0
RMSE_HD   <- 0
RMSE_HD_k <- 0
B_SW      <- 0
B_LI      <- 0
B_HD      <- 0
B_HD_k    <- 0
var_SW   <- 0
var_LI   <- 0
var_HD   <- 0
var_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i     <- param[(100*(i-1)+1):(100*i),]
#---MSE
RMSE_HD_k <- RMSE_HD_k + colMeans((par_i[,(4*J+1):(5*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_HD   <- RMSE_HD+colMeans((par_i[,(3*J+1):(4*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_LI   <- RMSE_LI+colMeans((par_i[,(2*J+1):(3*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_SW   <- RMSE_SW+colMeans((par_i[,(J+1):(2*J)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
#---Bias
B_SW   <- B_SW   + colMeans(par_i[,(J+1):(2*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_LI   <- B_LI   + colMeans(par_i[,(2*J+1):(3*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD   <- B_HD   + colMeans(par_i[,(3*J+1):(4*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD_k <- B_HD_k + colMeans(par_i[,(4*J+1):(5*J)] - rep(1,nb_imput)%*%as.matrix(theta))^2
#---Variance
mean_i   <- colMeans(par_i)
var_SW   <- var_SW   + colMeans((par_i[,(J+1):(2*J)] - rep(1,nb_imput)%*%t(mean_i[(J+1):(2*J)]))^2)
var_LI   <- var_LI   + colMeans((par_i[,(2*J+1):(3*J)] - rep(1,nb_imput)%*%t(mean_i[(2*J+1):(3*J)]))^2)
var_HD   <- var_HD   + colMeans((par_i[,(3*J+1):(4*J)] - rep(1,nb_imput)%*%t(mean_i[(3*J+1):(4*J)]))^2)
var_HD_k <- var_HD_k + colMeans((par_i[,(4*J+1):(5*J)] - rep(1,nb_imput)%*%t(mean_i[(4*J+1):(5*J)]))^2)
}
RMSE_HD_k   <- RMSE_HD_k/nb_nr
RMSE_HD     <- RMSE_HD/nb_nr
RMSE_LI     <- RMSE_LI/nb_nr
RMSE_SW     <- RMSE_SW/nb_nr
B_HD_k   <- B_HD_k/nb_nr
B_HD     <- B_HD/nb_nr
B_LI     <- B_LI/nb_nr
B_SW     <- B_SW/nb_nr
var_HD_k   <- var_HD_k/nb_nr
var_HD     <- var_HD/nb_nr
var_LI     <- var_LI/nb_nr
var_SW     <- var_SW/nb_nr
#-------Final results
B    <- round(rbind(B_HD = B_HD, B_HD_k = B_HD_k,  B_LI = B_LI, B_SW = B_SW),          4)
RMSE <- round(rbind(RMSE_HD = RMSE_HD,  RMSE_HD_k = RMSE_HD_k,   RMSE_LI = RMSE_LI, RMSE_SW = RMSE_SW),  4)
V    <- round(rbind(Var_HD = var_HD, Var_HD_k = var_HD_k,  Var_LI = var_LI, Var_SW = var_SW), 4)
return(list(B = B, RMSE = RMSE, V = V))
}
param_tot <- df[,tot]
resTot <- resultSimu(param = param_tot, J) # à adapter en fonction des méthodes à comparer
resTot
param_tot <- df[,tot]
resTot <- resultSimu(param = param_tot, J) # à adapter en fonction des méthodes à comparer
param_var <- df[,var]
resVar <- resultSimu(param = param_var, J) # à adapter en fonction des méthodes à comparer
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
kable(cbind(rbind(as.matrix(resP10$B),as.matrix(resP10$RMSE),as.matrix(resP10$V))[,-5],
rbind(as.matrix(resP50$B),as.matrix(resP50$RMSE),as.matrix(resP50$V))[,-5],
rbind(as.matrix(resP90$B),as.matrix(resP90$RMSE),as.matrix(resP90$V))[,-5]),
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
add_header_above(c(" " = 1,"Variables" = 5)) %>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
roxygen2::roxygenise()
devtools::load_all()
choose(J,2)
choose(J,2)
choose(J,2)
#---Covariance
resultSimuCov <- function(param,J) {
n <- nrow(param)
#############
comb  <- choose(J,2)
theta <- param[1,1:comb] #----only one row because there are all equal (true value)
#-------MSE+bias+variance of the estimate parameter of simulations (ex: total, P10, etc)
RMSE_SW   <- 0
RMSE_LI   <- 0
RMSE_HD   <- 0
RMSE_HD_k <- 0
B_SW      <- 0
B_LI      <- 0
B_HD      <- 0
B_HD_k    <- 0
var_SW   <- 0
var_LI   <- 0
var_HD   <- 0
var_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i     <- param[(100*(i-1)+1):(100*i),]
#---MSE
RMSE_HD_k <- RMSE_HD_k + colMeans((par_i[,(4*comb+1):(5*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_HD   <- RMSE_HD+colMeans((par_i[,(3*comb+1):(4*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_LI   <- RMSE_LI+colMeans((par_i[,(2*comb+1):(3*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_SW   <- RMSE_SW+colMeans((par_i[,(comb+1):(2*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
#---Bias
B_SW   <- B_SW   + colMeans(par_i[,(comb+1):(2*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_LI   <- B_LI   + colMeans(par_i[,(2*comb+1):(3*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD   <- B_HD   + colMeans(par_i[,(3*comb+1):(4*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD_k <- B_HD_k + colMeans(par_i[,(4*comb+1):(5*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
#---Variance
mean_i   <- colMeans(par_i)
var_SW   <- var_SW   + colMeans((par_i[,(comb+1):(2*comb)] - rep(1,nb_imput)%*%t(mean_i[(comb+1):(2*comb)]))^2)
var_LI   <- var_LI   + colMeans((par_i[,(2*comb+1):(3*comb)] - rep(1,nb_imput)%*%t(mean_i[(2*comb+1):(3*comb)]))^2)
var_HD   <- var_HD   + colMeans((par_i[,(3*comb+1):(4*comb)] - rep(1,nb_imput)%*%t(mean_i[(3*comb+1):(4*comb)]))^2)
var_HD_k <- var_HD_k + colMeans((par_i[,(4*comb+1):(5*comb)] - rep(1,nb_imput)%*%t(mean_i[(4*comb+1):(5*comb)]))^2)
}
RMSE_HD_k   <- RMSE_HD_k/nb_nr
RMSE_HD     <- RMSE_HD/nb_nr
RMSE_LI     <- RMSE_LI/nb_nr
RMSE_SW     <- RMSE_SW/nb_nr
B_HD_k   <- B_HD_k/nb_nr
B_HD     <- B_HD/nb_nr
B_LI     <- B_LI/nb_nr
B_SW     <- B_SW/nb_nr
var_HD_k   <- var_HD_k/nb_nr
var_HD     <- var_HD/nb_nr
var_LI     <- var_LI/nb_nr
var_SW     <- var_SW/nb_nr
#############
#-------Final results
B    <- round(rbind(B_SW = B_SW,        B_LI = B_LI,        B_HD = B_HD,        B_HD_k = B_HD),          4)
RMSE <- round(rbind(RMSE_SW = RMSE_SW,  RMSE_LI = RMSE_LI,  RMSE_HD = RMSE_HD,  RMSE_HD_k = RMSE_HD_k),  4)
V    <- round(rbind(Var_SW = var_nr_SW, Var_LI = var_nr_LI, Var_HD = var_nr_HD, Var_HD_k = var_nr_HD_k), 4)
return(list(B = B, RMSE = RMSE, V = V))
}
#---Download results covariance
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_5\\'
df_cov   <- read.csv(paste0(path,'cov_simu_1.csv'))
for(i in 2:100){
df_cov <- rbind(df_cov,read.csv(paste0(path,'cov_simu_',i,'.csv')))
}
df_cov <- df_cov[,-1]
#---Each parameter of variance/covariance
resCov <- resultSimuCov(param = df_cov, J) # à adapter en fonction des méthodes à comparer
#---Covariance
resultSimuCov <- function(param,J) {
n <- nrow(param)
#############
comb  <- choose(J,2)
theta <- param[1,1:comb] #----only one row because there are all equal (true value)
#-------MSE+bias+variance of the estimate parameter of simulations (ex: total, P10, etc)
RMSE_SW   <- 0
RMSE_LI   <- 0
RMSE_HD   <- 0
RMSE_HD_k <- 0
B_SW      <- 0
B_LI      <- 0
B_HD      <- 0
B_HD_k    <- 0
var_SW   <- 0
var_LI   <- 0
var_HD   <- 0
var_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i     <- param[(100*(i-1)+1):(100*i),]
#---MSE
RMSE_HD_k <- RMSE_HD_k + colMeans((par_i[,(4*comb+1):(5*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_HD   <- RMSE_HD+colMeans((par_i[,(3*comb+1):(4*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_LI   <- RMSE_LI+colMeans((par_i[,(2*comb+1):(3*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_SW   <- RMSE_SW+colMeans((par_i[,(comb+1):(2*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
#---Bias
B_SW   <- B_SW   + colMeans(par_i[,(comb+1):(2*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_LI   <- B_LI   + colMeans(par_i[,(2*comb+1):(3*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD   <- B_HD   + colMeans(par_i[,(3*comb+1):(4*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD_k <- B_HD_k + colMeans(par_i[,(4*comb+1):(5*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
#---Variance
mean_i   <- colMeans(par_i)
var_SW   <- var_SW   + colMeans((par_i[,(comb+1):(2*comb)] - rep(1,nb_imput)%*%t(mean_i[(comb+1):(2*comb)]))^2)
var_LI   <- var_LI   + colMeans((par_i[,(2*comb+1):(3*comb)] - rep(1,nb_imput)%*%t(mean_i[(2*comb+1):(3*comb)]))^2)
var_HD   <- var_HD   + colMeans((par_i[,(3*comb+1):(4*comb)] - rep(1,nb_imput)%*%t(mean_i[(3*comb+1):(4*comb)]))^2)
var_HD_k <- var_HD_k + colMeans((par_i[,(4*comb+1):(5*comb)] - rep(1,nb_imput)%*%t(mean_i[(4*comb+1):(5*comb)]))^2)
}
RMSE_HD_k   <- RMSE_HD_k/nb_nr
RMSE_HD     <- RMSE_HD/nb_nr
RMSE_LI     <- RMSE_LI/nb_nr
RMSE_SW     <- RMSE_SW/nb_nr
B_HD_k   <- B_HD_k/nb_nr
B_HD     <- B_HD/nb_nr
B_LI     <- B_LI/nb_nr
B_SW     <- B_SW/nb_nr
var_HD_k   <- var_HD_k/nb_nr
var_HD     <- var_HD/nb_nr
var_LI     <- var_LI/nb_nr
var_SW     <- var_SW/nb_nr
#############
#-------Final results
B    <- round(rbind(B_SW = B_SW,        B_LI = B_LI,        B_HD = B_HD,        B_HD_k = B_HD),          4)
RMSE <- round(rbind(RMSE_SW = RMSE_SW,  RMSE_LI = RMSE_LI,  RMSE_HD = RMSE_HD,  RMSE_HD_k = RMSE_HD_k),  4)
V    <- round(rbind(Var_SW = var_SW, Var_LI = var_LI, Var_HD = var_HD, Var_HD_k = var_HD_k), 4)
return(list(B = B, RMSE = RMSE, V = V))
}
#---Download results covariance
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_5\\'
df_cov   <- read.csv(paste0(path,'cov_simu_1.csv'))
for(i in 2:100){
df_cov <- rbind(df_cov,read.csv(paste0(path,'cov_simu_',i,'.csv')))
}
df_cov <- df_cov[,-1]
#---Each parameter of variance/covariance
resCov <- resultSimuCov(param = df_cov, J) # à adapter en fonction des méthodes à comparer
resCov
#---Covariance
resultSimuCov <- function(param,J) {
n <- nrow(param)
#############
comb  <- choose(J,2)
theta <- param[1,1:comb] #----only one row because there are all equal (true value)
#-------MSE+bias+variance of the estimate parameter of simulations (ex: total, P10, etc)
RMSE_SW   <- 0
RMSE_LI   <- 0
RMSE_HD   <- 0
RMSE_HD_k <- 0
B_SW      <- 0
B_LI      <- 0
B_HD      <- 0
B_HD_k    <- 0
var_SW   <- 0
var_LI   <- 0
var_HD   <- 0
var_HD_k <- 0
for(nr_i in 1:nb_nr){
par_i     <- param[(100*(i-1)+1):(100*i),]
#---MSE
RMSE_HD_k <- RMSE_HD_k + colMeans((par_i[,(4*comb+1):(5*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_HD   <- RMSE_HD+colMeans((par_i[,(3*comb+1):(4*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_LI   <- RMSE_LI+colMeans((par_i[,(2*comb+1):(3*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
RMSE_SW   <- RMSE_SW+colMeans((par_i[,(comb+1):(2*comb)]   - rep(1,nb_imput)%*%as.matrix(theta))^2)
#---Bias
B_SW   <- B_SW   + colMeans(par_i[,(comb+1):(2*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_LI   <- B_LI   + colMeans(par_i[,(2*comb+1):(3*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD   <- B_HD   + colMeans(par_i[,(3*comb+1):(4*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
B_HD_k <- B_HD_k + colMeans(par_i[,(4*comb+1):(5*comb)] - rep(1,nb_imput)%*%as.matrix(theta))^2
#---Variance
mean_i   <- colMeans(par_i)
var_SW   <- var_SW   + colMeans((par_i[,(comb+1):(2*comb)] - rep(1,nb_imput)%*%t(mean_i[(comb+1):(2*comb)]))^2)
var_LI   <- var_LI   + colMeans((par_i[,(2*comb+1):(3*comb)] - rep(1,nb_imput)%*%t(mean_i[(2*comb+1):(3*comb)]))^2)
var_HD   <- var_HD   + colMeans((par_i[,(3*comb+1):(4*comb)] - rep(1,nb_imput)%*%t(mean_i[(3*comb+1):(4*comb)]))^2)
var_HD_k <- var_HD_k + colMeans((par_i[,(4*comb+1):(5*comb)] - rep(1,nb_imput)%*%t(mean_i[(4*comb+1):(5*comb)]))^2)
}
RMSE_HD_k   <- RMSE_HD_k/nb_nr
RMSE_HD     <- RMSE_HD/nb_nr
RMSE_LI     <- RMSE_LI/nb_nr
RMSE_SW     <- RMSE_SW/nb_nr
B_HD_k   <- B_HD_k/nb_nr
B_HD     <- B_HD/nb_nr
B_LI     <- B_LI/nb_nr
B_SW     <- B_SW/nb_nr
var_HD_k   <- var_HD_k/nb_nr
var_HD     <- var_HD/nb_nr
var_LI     <- var_LI/nb_nr
var_SW     <- var_SW/nb_nr
#############
#-------Final results
B    <- round(rbind(B_HD = B_HD,        B_HD_k = B_HD,        B_LI = B_LI, B_SW = B_SW),          4)
RMSE <- round(rbind(RMSE_HD = RMSE_HD,  RMSE_HD_k = RMSE_HD_k,  RMSE_LI = RMSE_LI,RMSE_SW = RMSE_SW),  4)
V    <- round(rbind(Var_HD = var_HD, Var_HD_k = var_HD_k,  Var_LI = var_LI, Var_SW = var_SW), 4)
return(list(B = B, RMSE = RMSE, V = V))
}
path <- 'C:\\Users\\eustachee\\switchdrive\\Swiss cheese\\subject_1\\Simulation\\results_5\\'
df_cov   <- read.csv(paste0(path,'cov_simu_1.csv'))
for(i in 2:100){
df_cov <- rbind(df_cov,read.csv(paste0(path,'cov_simu_',i,'.csv')))
}
df_cov <- df_cov[,-1]
#---Each parameter of variance/covariance
resCov <- resultSimuCov(param = df_cov, J) # à adapter en fonction des méthodes à comparer
rescov2 <- cbind(as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,1]),
rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,1:4],
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,2]),
rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,5:7],
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,3]),
rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,8:9],
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,4]),
as.matrix(rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,10]),
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,5]))
rescov2 <- rescov2[-10,]
kable(rescov2,
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
rescov2 <- cbind(as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,1]),
rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,1:4],
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,2]),
rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,5:7],
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,3]),
rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,8:9],
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,4]),
as.matrix(rbind(as.matrix(resCov$B),as.matrix(resCov$RMSE),as.matrix(resCov$V))[,10]),
as.matrix(rbind(as.matrix(resVar$B), as.matrix(resVar$RMSE), as.matrix(resVar$V))[,5]))
rescov2 <- rescov2[-11,]
rescov2
kable(rescov2,
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
param = param_tot
nb_nr
nb_nr <- 100
nb_imput <- 100
param_tot <- df[,tot]
resTot <- resultSimu(param = param_tot, J) # à adapter en fonction des méthodes à comparer
resTot
param_var <- df[,var]
resVar <- resultSimu(param = param_var, J) # à adapter en fonction des méthodes à comparer
param_P10 <- df[,P10]
resP10 <- resultSimu(param = param_P10, J)
resP10
param_P50 <- df[,P50]
resP50 <- resultSimu(param = param_P50, J)
resP50
param_P90 <- df[,P90]
resP90 <- resultSimu(param = param_P90, J)
resP90
#---Each parameter of variance/covariance
resCov <- resultSimuCov(param = df_cov, J) # à adapter en fonction des méthodes à comparer
resCov
kable(round(rescov2,1),
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
kable(round(rescov2,1),
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = FALSE,escape = FALSE)%>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
param = param_tot
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
theta
param
resTot
kable(rbind(as.matrix(resTot$B),as.matrix(resTot$RMSE),as.matrix(resTot$V)), format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of total estimator, in the case of HD, HD-Knn, DB-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
add_header_above(c(" " = 1,"Variables" = 5)) %>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
kable(round(rbind(as.matrix(resTot$B),as.matrix(resTot$RMSE),as.matrix(resTot$V)),0), format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of total estimator, in the case of HD, HD-Knn, DB-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
add_header_above(c(" " = 1,"Variables" = 5)) %>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
param = param_P10
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
theta
param_P50 <- df[,P50]
param = param_P50
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
theta
param_90
param_P90
param <- param_P90
#############
theta       <- param[1,1:J] #----only one row because there are all equal (true value)
theta
param = df_cov
theta <- param[1,1:comb]
theta
round(theta,1)
kable(round(cbind(rbind(as.matrix(resP10$B),as.matrix(resP10$RMSE),as.matrix(resP10$V))[,-5],
rbind(as.matrix(resP50$B),as.matrix(resP50$RMSE),as.matrix(resP50$V))[,-5],
rbind(as.matrix(resP90$B),as.matrix(resP90$RMSE),as.matrix(resP90$V))[,-5]),2),
format = "latex",digits = 3,
booktabs = T, caption = "Bias, mean squared errors (MSE) and variance of 10th; 50th and 90th percentiles estimators, in the case of DB-Knn, HD-Knn and B-Knn imputation, relative to the true total.",
row.names = TRUE,escape = FALSE)%>%
add_header_above(c(" " = 1,"Variables" = 5)) %>%
group_rows("Bias",1,4,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("MSE",5,8,escape = F,bold = F,latex_gap_space = "1ex")%>%
group_rows("Variance",9,11,escape = F,bold = F,latex_gap_space = "1ex")%>%
kable_styling(font_size = 9,latex_options="scale_down")
roxygen2::roxygenise()
devtools::load_all()
devtools::build_manual()
devtools::build_manual()
roxygen2::roxygenise()
devtools::load_all()
devtools::build_manual()
roxygen2::roxygenise()
devtools::build_manual()
