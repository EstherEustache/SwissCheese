+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp')
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
SwissLake
SwissLake$GMDNAME
SwissCanton
SwissCanton$KTNAME
plotSwiss <- function(path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
xlab = " " ,
ylab = " "
)
{
# require package
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
# lake
# SwissLake <- SwissLake[c(3,4,5,6,16,17),]
SwissLake <- SwissLake[c(5,6),]
# add and crop SwissCanton; SwissCommune
# if(sum(Canton == TRUE) & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCanton$GRNR == Region[i]))
#   }
#   SwissCanton <- SwissCanton[tmp,]
# }
# if(Commune == TRUE & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCommune$GRNR == Region[i]))
#   }
#   SwissCommune <- SwissCommune[tmp,]
# }
# theme ggplot
theme_spatio <- function(...) {
theme_minimal() +
theme(
text = element_text(family="sans",color = "black",size = 9),
panel.spacing = unit(2, "lines"),
# title
plot.title = element_text(hjust = 0.5,size = 9),
# axes
axis.line=element_blank(),
axis.ticks=element_blank(),
# legend
legend.position="bottom",
legend.title = element_text(size = 9,vjust = +1.0),
legend.key.size = unit(0.3, "cm"),
legend.key.width = unit(0.7,"cm") ,
# background colors
panel.background=element_blank(),
panel.border=element_rect(colour = "black",fill = "transparent"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# keep edge black facet_wrap
# strip.background = element_rect(fill="white"),
strip.text =element_text(color = "black",size = 8)
)
}
# if we only want Switzerland
SwissCrop <- SwissCanton[c(2,22,24),]
# return ggplot
return(
ggplot()+
geom_sf(data = SwissCrop,fill = "transparent",color = "black",size = 0.1)+
geom_sf(data = SwissCanton,fill = "transparent",color = "black",size = 0.1)+
{if(Commune == TRUE){geom_sf(data = SwissCommune,fill = "transparent",color = "black",size = 0.1)}}+
#geom_sf(data = SwissLake,fill = "#ECECEC",size = 0.1)+
geom_sf(data = SwissLake,fill = "lightblue",size = 0.1)+
theme_spatio() + xlab(xlab) + ylab(ylab)
+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
plotSwiss()
plotSwiss <- function(path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
xlab = " " ,
ylab = " "
)
{
# require package
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
# lake
# SwissLake <- SwissLake[c(3,4,5,6,16,17),]
SwissLake <- SwissLake[c(5,6),]
# add and crop SwissCanton; SwissCommune
# if(sum(Canton == TRUE) & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCanton$GRNR == Region[i]))
#   }
#   SwissCanton <- SwissCanton[tmp,]
# }
# if(Commune == TRUE & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCommune$GRNR == Region[i]))
#   }
#   SwissCommune <- SwissCommune[tmp,]
# }
# theme ggplot
theme_spatio <- function(...) {
theme_minimal() +
theme(
text = element_text(family="sans",color = "black",size = 9),
panel.spacing = unit(2, "lines"),
# title
plot.title = element_text(hjust = 0.5,size = 9),
# axes
axis.line=element_blank(),
axis.ticks=element_blank(),
# legend
legend.position="bottom",
legend.title = element_text(size = 9,vjust = +1.0),
legend.key.size = unit(0.3, "cm"),
legend.key.width = unit(0.7,"cm") ,
# background colors
panel.background=element_blank(),
panel.border=element_rect(colour = "black",fill = "transparent"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# keep edge black facet_wrap
# strip.background = element_rect(fill="white"),
strip.text =element_text(color = "black",size = 8)
)
}
# if we only want Switzerland
SwissCrop <- SwissCanton[c(2,22,24),]
# return ggplot
return(
ggplot()+
geom_sf(data = SwissCrop,fill = "transparent",color = "black",size = 0.1)+
geom_sf(data = SwissCanton,fill = "transparent",color = "black",size = 0.1)+
#geom_sf(data = SwissLake,fill = "#ECECEC",size = 0.1)+
geom_sf(data = SwissLake,fill = "lightblue",size = 0.1)+
theme_spatio() + xlab(xlab) + ylab(ylab)
+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
plotSwiss()
plotSwiss <- function(path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
xlab = " " ,
ylab = " "
)
{
# require package
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
# lake
# SwissLake <- SwissLake[c(3,4,5,6,16,17),]
SwissLake <- SwissLake[c(5,6),]
# add and crop SwissCanton; SwissCommune
# if(sum(Canton == TRUE) & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCanton$GRNR == Region[i]))
#   }
#   SwissCanton <- SwissCanton[tmp,]
# }
# if(Commune == TRUE & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCommune$GRNR == Region[i]))
#   }
#   SwissCommune <- SwissCommune[tmp,]
# }
# theme ggplot
theme_spatio <- function(...) {
theme_minimal() +
theme(
text = element_text(family="sans",color = "black",size = 9),
panel.spacing = unit(2, "lines"),
# title
plot.title = element_text(hjust = 0.5,size = 9),
# axes
axis.line=element_blank(),
axis.ticks=element_blank(),
# legend
legend.position="bottom",
legend.title = element_text(size = 9,vjust = +1.0),
legend.key.size = unit(0.3, "cm"),
legend.key.width = unit(0.7,"cm") ,
# background colors
panel.background=element_blank(),
panel.border=element_rect(colour = "black",fill = "transparent"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# keep edge black facet_wrap
# strip.background = element_rect(fill="white"),
strip.text =element_text(color = "black",size = 8)
)
}
# if we only want Switzerland
SwissCrop <- SwissCanton[c(2,22,24),]
# return ggplot
return(
ggplot()+
geom_sf(data = SwissCrop,fill = "transparent",color = "black",size = 0.1)+
#geom_sf(data = SwissLake,fill = "#ECECEC",size = 0.1)+
geom_sf(data = SwissLake,fill = "lightblue",size = 0.1)+
theme_spatio() + xlab(xlab) + ylab(ylab)
+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
plotSwiss()
SwissLake
SwissLake$GMDNAME
plotSwiss <- function(path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
xlab = " " ,
ylab = " "
)
{
# require package
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
# lake
# SwissLake <- SwissLake[c(3,4,5,6,16,17),]
SwissLake <- SwissLake[c(5,6,17,22),]
# add and crop SwissCanton; SwissCommune
# if(sum(Canton == TRUE) & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCanton$GRNR == Region[i]))
#   }
#   SwissCanton <- SwissCanton[tmp,]
# }
# if(Commune == TRUE & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCommune$GRNR == Region[i]))
#   }
#   SwissCommune <- SwissCommune[tmp,]
# }
# theme ggplot
theme_spatio <- function(...) {
theme_minimal() +
theme(
text = element_text(family="sans",color = "black",size = 9),
panel.spacing = unit(2, "lines"),
# title
plot.title = element_text(hjust = 0.5,size = 9),
# axes
axis.line=element_blank(),
axis.ticks=element_blank(),
# legend
legend.position="bottom",
legend.title = element_text(size = 9,vjust = +1.0),
legend.key.size = unit(0.3, "cm"),
legend.key.width = unit(0.7,"cm") ,
# background colors
panel.background=element_blank(),
panel.border=element_rect(colour = "black",fill = "transparent"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# keep edge black facet_wrap
# strip.background = element_rect(fill="white"),
strip.text =element_text(color = "black",size = 8)
)
}
# if we only want Switzerland
SwissCrop <- SwissCanton[c(2,22,24),]
# return ggplot
return(
ggplot()+
geom_sf(data = SwissCrop,fill = "transparent",color = "black",size = 0.1)+
#geom_sf(data = SwissLake,fill = "#ECECEC",size = 0.1)+
geom_sf(data = SwissLake,fill = "lightblue",size = 0.1)+
theme_spatio() + xlab(xlab) + ylab(ylab)
+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
plotSwiss()
plotSwiss <- function(path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
xlab = " " ,
ylab = " "
)
{
# require package
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
# lake
# SwissLake <- SwissLake[c(3,4,5,6,16,17),]
SwissLake <- SwissLake[c(5,6,17,22),]
# add and crop SwissCanton; SwissCommune
# if(sum(Canton == TRUE) & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCanton$GRNR == Region[i]))
#   }
#   SwissCanton <- SwissCanton[tmp,]
# }
# if(Commune == TRUE & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCommune$GRNR == Region[i]))
#   }
#   SwissCommune <- SwissCommune[tmp,]
# }
# theme ggplot
theme_spatio <- function(...) {
theme_minimal() +
theme(
text = element_text(family="sans",color = "black",size = 9),
panel.spacing = unit(2, "lines"),
# title
plot.title = element_text(hjust = 0.5,size = 9),
# axes
axis.line=element_blank(),
axis.ticks=element_blank(),
# legend
legend.position="bottom",
legend.title = element_text(size = 9,vjust = +1.0),
legend.key.size = unit(0.3, "cm"),
legend.key.width = unit(0.7,"cm") ,
# background colors
panel.background=element_blank(),
panel.border=element_rect(colour = "black",fill = "transparent"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# keep edge black facet_wrap
# strip.background = element_rect(fill="white"),
strip.text =element_text(color = "black",size = 8)
)
}
# if we only want Switzerland
SwissCrop <- SwissCanton[c(2,22,24),]
# return ggplot
return(
ggplot()+
geom_sf(data = SwissCrop,fill = "lightgrey",color = "black",size = 0.1)+
#geom_sf(data = SwissLake,fill = "#ECECEC",size = 0.1)+
geom_sf(data = SwissLake,fill = "lightblue",size = 0.1)+
theme_spatio() + xlab(xlab) + ylab(ylab)
+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
plotSwiss()
plotSwiss <- function(path = paste0('C:\\Users\\',user,'Spatio-temporal\\simulations\\ggg_2019-LV03\\shp'), #where are data? (simulations\\ggg_2019-LV03\\shp)
xlab = " " ,
ylab = " "
)
{
# require package
require(ggplot2)
require(sf)
require(raster)
# load shapefile
Swiss <- read_sf(paste0(path,"\\g1l19.shp"))
SwissRegion <- read_sf(paste0(path,"\\g1r19.shp"))
SwissCanton <- read_sf(paste0(path,"\\g1k19.shp"))
SwissCommune <- read_sf(paste0(path,"\\g1g19.shp"))
SwissLake <- read_sf(paste0(path,"\\g1s19.shp"))
# lake
# SwissLake <- SwissLake[c(3,4,5,6,16,17),]
SwissLake <- SwissLake[c(5,6,17,22),]
# add and crop SwissCanton; SwissCommune
# if(sum(Canton == TRUE) & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCanton$GRNR == Region[i]))
#   }
#   SwissCanton <- SwissCanton[tmp,]
# }
# if(Commune == TRUE & !is.null(Region)){
#   tmp <- NULL
#   for(i in 1:length(Region)){
#     tmp <- c(tmp,which(SwissCommune$GRNR == Region[i]))
#   }
#   SwissCommune <- SwissCommune[tmp,]
# }
# theme ggplot
theme_spatio <- function(...) {
theme_minimal() +
theme(
text = element_text(family="sans",color = "black",size = 9),
panel.spacing = unit(2, "lines"),
# title
plot.title = element_text(hjust = 0.5,size = 9),
# axes
axis.line=element_blank(),
axis.ticks=element_blank(),
# legend
legend.position="bottom",
legend.title = element_text(size = 9,vjust = +1.0),
legend.key.size = unit(0.3, "cm"),
legend.key.width = unit(0.7,"cm") ,
# background colors
panel.background=element_blank(),
panel.border=element_rect(colour = "black",fill = "transparent"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
# keep edge black facet_wrap
# strip.background = element_rect(fill="white"),
strip.text =element_text(color = "black",size = 8)
)
}
# if we only want Switzerland
SwissCrop <- SwissCanton[c(2,22,24),]
# return ggplot
return(
ggplot()+
geom_sf(data = SwissCrop,fill = "gray96",color = "black",size = 0.1)+
#geom_sf(data = SwissLake,fill = "#ECECEC",size = 0.1)+
geom_sf(data = SwissLake,fill = "lightblue",size = 0.1)+
theme_spatio() + xlab(xlab) + ylab(ylab)
+ theme(plot.margin = unit(c(0,-2,0,0), "cm"))
# + theme(
#   axis.title.x = element_text(size = 16),
#   axis.title.y = element_text(size = 16)
# )
)
#return(XCrop[,1:3])
}
plotSwiss()
13.15*28.34
13.15*28.3465
0.3*372
Xr  <- rbind(c(0.1,0.3,0.4,0.1), c(0.1,0.3,0.2,0.1), c(0.1,0.2,0.3,0.1),
c(0.2,0.3,0.2,0.3), c(0.1,0.1,0.2,0.1))
Xm  <- rbind(c(NA,0.1,NA,0.1), c(0.1,NA,0.2,NA))
X   <- rbind(Xr,Xm)
lpSparseSwissCheese(X)
setwd(dir = 'C:\\Users\\eustachee\\Dropbox\\Eustache_Tille_Vallee\\Projet_swiss_cheese\\SwissCheese\\')
setwd(dir = 'C:\\Users\\eustachee\\Dropbox\\Eustache_Tille_Vallee\\Projet_swiss_cheese\\SwissCheese\\')
setwd(dir = 'C:\\Users\\eustachee\\Dropbox\\Eustache_Tille_Vallee\\Projet_swiss_cheese\\SwissCheese\\')
devtools::load_all()
setwd(dir = 'C:\\Users\\eustachee\\Dropbox\\Eustache_Tille_Vallee\\Projet_swiss_cheese\\SwissCheese\\')
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
devtools::build_manual()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
devtools::build_manual()
