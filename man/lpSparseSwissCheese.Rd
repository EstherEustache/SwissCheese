% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lpSparseSwissCheese.R
\name{lpSparseSwissCheese}
\alias{lpSparseSwissCheese}
\title{Balanced donor imputation method handling Swiss cheese nonresponse}
\usage{
lpSparseSwissCheese(
  X,
  d = NULL,
  w = NULL,
  k_min = 5,
  k_max = NULL,
  rand = TRUE
)
}
\arguments{
\item{X}{a matrix with NA values. The rows correspond to the units.}

\item{d}{a vector containing the sampling weights of the units. If NULL (default), all sampling weights are equal to 1.}

\item{w}{a vector containing the weights of the variables.
Each variable is multiplied by its weight in order to give more (if the weight is greater than 1) or less importance (if the weight is less than 1) when calculating the distance between the units.
If NULL (default), all weights are equal to 1.}

\item{k_min}{minimum number of neighbors with a non-zero imputation probability for each nonrespondent.}

\item{k_max}{maximum number of neighbors with a non-zero imputation probability for each nonrespondent.}

\item{rand}{if TRUE, the imputation will be random. If FALSE, the imputation will be determinist.}
}
\value{
the imputed matrix of \code{X}.
}
\description{
It imputes missing values by using a donor imputation method.
It extends the balanced \code{k}-nearest neighbor imputation (Hasler and Tille, 2016) to the treatment of the Swiss cheese nonresponse.
A linear programming is used to compute the imputation probability matrix while satisfying some constraints.
}
\examples{
Xr  <- rbind(c(0.1,0.3,0.4,0.1), c(0.1,0.3,0.2,0.1), c(0.1,0.2,0.3,0.1),
             c(0.2,0.3,0.2,0.3), c(0.1,0.1,0.2,0.1))
Xm  <- rbind(c(NA,0.1,NA,0.1), c(0.1,NA,0.2,NA))
X   <- rbind(Xr,Xm)
lpSparseSwissCheese(X)

}
\seealso{
\code{\link[StratifiedSampling:stratifiedcube]{StratifiedSampling::stratifiedcube}},
\code{\link[Rglpk:Rglpk_solve_LP]{Rglpk::Rglpk_solve_LP}}, \code{\link[slam:simple_triplet_matrix]{slam::simple_triplet_matrix}}
}
\author{
Esther Eustache \email{esther.eustache@unine.ch}
}
